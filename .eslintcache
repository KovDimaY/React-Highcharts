[{"/Users/dkoval/dev/React-Highcharts/src/components/app.js":"1","/Users/dkoval/dev/React-Highcharts/src/components/charts/bar.js":"2","/Users/dkoval/dev/React-Highcharts/src/components/charts/chart-abstract.js":"3","/Users/dkoval/dev/React-Highcharts/src/components/charts/line.js":"4","/Users/dkoval/dev/React-Highcharts/src/components/charts/other.js":"5","/Users/dkoval/dev/React-Highcharts/src/components/charts/pie.js":"6","/Users/dkoval/dev/React-Highcharts/src/components/charts/playground.js":"7","/Users/dkoval/dev/React-Highcharts/src/components/charts/scatter.js":"8","/Users/dkoval/dev/React-Highcharts/src/components/charts/stock-abstract.js":"9","/Users/dkoval/dev/React-Highcharts/src/components/footer.js":"10","/Users/dkoval/dev/React-Highcharts/src/components/header.js":"11","/Users/dkoval/dev/React-Highcharts/src/components/home.js":"12","/Users/dkoval/dev/React-Highcharts/src/components/notFound.js":"13","/Users/dkoval/dev/React-Highcharts/src/components/tooltip.js":"14","/Users/dkoval/dev/React-Highcharts/src/constants/bar/data-helpers-bar.js":"15","/Users/dkoval/dev/React-Highcharts/src/constants/bar/default-options-bar.js":"16","/Users/dkoval/dev/React-Highcharts/src/constants/bar/modes-options-bar.js":"17","/Users/dkoval/dev/React-Highcharts/src/constants/line/data-helpers-line.js":"18","/Users/dkoval/dev/React-Highcharts/src/constants/line/default-options-line.js":"19","/Users/dkoval/dev/React-Highcharts/src/constants/line/modes-options-line.js":"20","/Users/dkoval/dev/React-Highcharts/src/constants/other/data-helpers-other.js":"21","/Users/dkoval/dev/React-Highcharts/src/constants/other/default-options-other.js":"22","/Users/dkoval/dev/React-Highcharts/src/constants/other/modes-options-other.js":"23","/Users/dkoval/dev/React-Highcharts/src/constants/pie/data-helpers-pie.js":"24","/Users/dkoval/dev/React-Highcharts/src/constants/pie/default-options-pie.js":"25","/Users/dkoval/dev/React-Highcharts/src/constants/pie/modes-options-pie.js":"26","/Users/dkoval/dev/React-Highcharts/src/constants/pie/pi-digits.js":"27","/Users/dkoval/dev/React-Highcharts/src/constants/scatter/data-helpers-scatter.js":"28","/Users/dkoval/dev/React-Highcharts/src/constants/scatter/default-options-scatter.js":"29","/Users/dkoval/dev/React-Highcharts/src/constants/scatter/modes-options-scatter.js":"30","/Users/dkoval/dev/React-Highcharts/src/constants/shared/helpers.js":"31","/Users/dkoval/dev/React-Highcharts/src/index.js":"32","/Users/dkoval/dev/React-Highcharts/src/routes.js":"33"},{"size":378,"mtime":1634501973144,"results":"34","hashOfConfig":"35"},{"size":29523,"mtime":1634501973145,"results":"36","hashOfConfig":"35"},{"size":1645,"mtime":1634501973145,"results":"37","hashOfConfig":"35"},{"size":35440,"mtime":1634980560147,"results":"38","hashOfConfig":"35"},{"size":44316,"mtime":1634501973147,"results":"39","hashOfConfig":"35"},{"size":23307,"mtime":1634501973147,"results":"40","hashOfConfig":"35"},{"size":2582,"mtime":1634980589762,"results":"41","hashOfConfig":"35"},{"size":30546,"mtime":1634501973147,"results":"42","hashOfConfig":"35"},{"size":725,"mtime":1634980645632,"results":"43","hashOfConfig":"35"},{"size":1298,"mtime":1634501973149,"results":"44","hashOfConfig":"35"},{"size":1691,"mtime":1634501973149,"results":"45","hashOfConfig":"35"},{"size":9795,"mtime":1634934855614,"results":"46","hashOfConfig":"35"},{"size":604,"mtime":1634501973150,"results":"47","hashOfConfig":"35"},{"size":706,"mtime":1634934855615,"results":"48","hashOfConfig":"35"},{"size":5201,"mtime":1634501973151,"results":"49","hashOfConfig":"35"},{"size":6551,"mtime":1634501973151,"results":"50","hashOfConfig":"35"},{"size":3806,"mtime":1634501973151,"results":"51","hashOfConfig":"35"},{"size":4504,"mtime":1634501973152,"results":"52","hashOfConfig":"35"},{"size":11474,"mtime":1634501973152,"results":"53","hashOfConfig":"35"},{"size":4196,"mtime":1634501973153,"results":"54","hashOfConfig":"35"},{"size":12297,"mtime":1634501973153,"results":"55","hashOfConfig":"35"},{"size":8666,"mtime":1634501973153,"results":"56","hashOfConfig":"35"},{"size":3467,"mtime":1634501973154,"results":"57","hashOfConfig":"35"},{"size":4051,"mtime":1634501973154,"results":"58","hashOfConfig":"35"},{"size":13593,"mtime":1634501973155,"results":"59","hashOfConfig":"35"},{"size":3485,"mtime":1634501973155,"results":"60","hashOfConfig":"35"},{"size":1000025,"mtime":1634501973173,"results":"61","hashOfConfig":"35"},{"size":6671,"mtime":1634980660086,"results":"62","hashOfConfig":"35"},{"size":6883,"mtime":1634501973176,"results":"63","hashOfConfig":"35"},{"size":2243,"mtime":1634501973176,"results":"64","hashOfConfig":"35"},{"size":501,"mtime":1634461824077,"results":"65","hashOfConfig":"35"},{"size":334,"mtime":1634937920195,"results":"66","hashOfConfig":"35"},{"size":917,"mtime":1634501973177,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1tzl3y2",{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":4,"source":"93"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113"},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118"},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127"},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/dkoval/dev/React-Highcharts/src/components/app.js",[],"/Users/dkoval/dev/React-Highcharts/src/components/charts/bar.js",["144","145","146","147","148","149","150","151"],"import React, { Component } from 'react';\nimport TagsInput from 'react-tagsinput';\n\nimport Chart from './chart-abstract';\nimport Tooltip from '../tooltip';\n\nimport {\n  pureRandom,\n  configurableRandom,\n  balanceSimulation,\n  symbolsAnalysis,\n  wordsAnalysis,\n  interestingFactsOne,\n  interestingFactsTwo,\n  interestingFactsThree,\n} from '../../constants/bar/default-options-bar';\n\nimport {\n  modes,\n  tooltips,\n  initialState,\n  optionsPureRandom,\n  optionsConfigurableRandom,\n  optionsBalanceSimulation,\n  optionsSymbolsAnalysis,\n  optionsWordsAnalysis,\n  optionsInterestingFacts,\n} from '../../constants/bar/modes-options-bar';\n\nimport {\n  generateSeriesForPureRandom,\n  generateSeriesForConfigurableRandom,\n  generateCategoriesConfigurableRandom,\n  generateSeriesForBalanceSimulation,\n  newPointsToBalanceSimulation,\n  collectPointsAndCategories,\n  generateSeriesForSymbolsAnalysis,\n  sortAndCutPoints,\n  collectWordsAndCategories,\n  generateSeriesForWordsAnalysis,\n  sortAndCutWords,\n} from '../../constants/bar/data-helpers-bar';\n\nimport { limitNumericalInput } from '../../constants/shared/helpers';\n\nexport default class Bar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = initialState;\n\n    this.dropdownClickHandler = this.dropdownClickHandler.bind(this);\n    this.updatePureRandomConfiguration = this.updatePureRandomConfiguration.bind(this);\n    this.updateBalanceSimulationConfiguration = this.updateBalanceSimulationConfiguration.bind(\n      this\n    );\n    this.updateConfigurableRandomConfiguration = this.updateConfigurableRandomConfiguration.bind(\n      this\n    );\n    this.updateSymbolsAnalysisConfiguration = this.updateSymbolsAnalysisConfiguration.bind(this);\n    this.updateWordsAnalysisConfiguration = this.updateWordsAnalysisConfiguration.bind(this);\n    this.onPureRandomCheckBoxChange = this.onPureRandomCheckBoxChange.bind(this);\n    this.onConfigurableRandomInputChange = this.onConfigurableRandomInputChange.bind(this);\n    this.onBalanceSimulationInputChange = this.onBalanceSimulationInputChange.bind(this);\n    this.onSymbolAnalysisInputChange = this.onSymbolAnalysisInputChange.bind(this);\n    this.onWordsAnalysisInputChange = this.onWordsAnalysisInputChange.bind(this);\n    this.onWordsAnalysisTagsChange = this.onWordsAnalysisTagsChange.bind(this);\n    this.onInterestingFactsRadioChange = this.onInterestingFactsRadioChange.bind(this);\n  }\n\n  componentDidMount() {\n    this.initPureRandomeMode();\n  }\n\n  initPureRandomeMode() {\n    const options = pureRandom;\n\n    options.series = generateSeriesForPureRandom();\n\n    this.setState({ options }, () => {\n      this.updatePureRandomConfiguration();\n    });\n  }\n\n  initConfigurableRandomeMode() {\n    const options = configurableRandom;\n\n    this.setState({ options }, () => {\n      this.updateConfigurableRandomConfiguration();\n    });\n  }\n\n  initBalanceSimulationMode() {\n    const options = balanceSimulation;\n    const { initIncome, initExpenses } = this.state.configurations.balanceSimulation;\n\n    options.series = generateSeriesForBalanceSimulation(initIncome, initExpenses);\n\n    this.setState({ options }, () => {\n      this.updateBalanceSimulationConfiguration();\n    });\n  }\n\n  initSymbolsAnalysisMode() {\n    const options = symbolsAnalysis;\n\n    this.setState({ options }, () => {\n      this.updateSymbolsAnalysisConfiguration();\n    });\n  }\n\n  initWordsAnalysisMode() {\n    const options = wordsAnalysis;\n\n    this.setState({ options }, () => {\n      this.updateWordsAnalysisConfiguration();\n    });\n  }\n\n  initInterestingFactsMode() {\n    const options = interestingFactsOne;\n\n    this.setState({ options, rerenderChart: true }, () => {\n      this.setState({ rerenderChart: false });\n    });\n  }\n\n  updatePureRandomConfiguration() {\n    const { pureRandom } = this.state.configurations;\n    const { options } = this.state;\n    options.chart.type = pureRandom.vertical ? 'column' : 'bar';\n    options.chart.zoomType = pureRandom.zoom ? 'xy' : null;\n    options.title.text = pureRandom.title ? 'Randomly generated data' : null;\n    options.subtitle.text = pureRandom.title ? 'Randomly generated data' : null;\n    options.legend.enabled = pureRandom.legend;\n    options.yAxis.title.text = pureRandom.yAxisTitle ? 'Random Value (UOM)' : null;\n    if (pureRandom.vertical) {\n      options.plotOptions.column.dataLabels.enabled = pureRandom.dataLabels;\n      options.plotOptions.column.enableMouseTracking = pureRandom.tooltip;\n      options.plotOptions.column.stacking = pureRandom.stacking ? 'normal' : null;\n    } else {\n      options.plotOptions.bar.dataLabels.enabled = pureRandom.dataLabels;\n      options.plotOptions.bar.enableMouseTracking = pureRandom.tooltip;\n      options.plotOptions.bar.stacking = pureRandom.stacking ? 'normal' : null;\n    }\n    options.plotOptions.series.animation = pureRandom.animation;\n\n    this.setState({ options, rerenderChart: true }, () => {\n      this.setState({ rerenderChart: false });\n    });\n  }\n\n  updateConfigurableRandomConfiguration() {\n    const { configurableRandom } = this.state.configurations;\n    const { options } = this.state;\n\n    const series = generateSeriesForConfigurableRandom(configurableRandom);\n    const categories = generateCategoriesConfigurableRandom(configurableRandom.categoriesNumber);\n    options.series = series;\n    options.xAxis.categories = categories;\n\n    this.setState({ options, rerenderChart: true }, () => {\n      this.setState({ rerenderChart: false });\n    });\n  }\n\n  updateBalanceSimulationConfiguration(event) {\n    const { configurations, options } = this.state;\n    const { isRunning, initIncome, initExpenses } = configurations.balanceSimulation;\n    if (event) {\n      if (isRunning) {\n        configurations.balanceSimulation.isRunning = false;\n        this.setState({ options, configurations, rerenderChart: true }, () => {\n          this.setState({ rerenderChart: false });\n        });\n      } else {\n        options.series = generateSeriesForBalanceSimulation(initIncome, initExpenses);\n        configurations.balanceSimulation.isRunning = true;\n        this.setState({ configurations }, () => {\n          this.addPointsToBalanceSimulation();\n        });\n      }\n    } else {\n      this.setState({ options, rerenderChart: true }, () => {\n        this.setState({ rerenderChart: false });\n      });\n    }\n  }\n\n  updateSymbolsAnalysisConfiguration() {\n    const { options, configurations } = this.state;\n    const { text, limit, filter, caseSensitive } = configurations.symbolsAnalysis;\n\n    const rawData = collectPointsAndCategories(text, caseSensitive, filter);\n    const { points, categories } = sortAndCutPoints(rawData, limit);\n\n    options.series = generateSeriesForSymbolsAnalysis(points);\n    options.xAxis.categories = categories;\n    options.title.text = 'Characters Analysis';\n    options.subtitle.text = `${limit} the most frequent characters`;\n\n    this.setState({ options, rerenderChart: true }, () => {\n      this.setState({ rerenderChart: false });\n    });\n  }\n\n  updateWordsAnalysisConfiguration() {\n    const { options, configurations } = this.state;\n    const { text, limit, filter, caseSensitive } = configurations.wordsAnalysis;\n\n    const rawData = collectWordsAndCategories(text, caseSensitive, filter);\n    const { words, categories } = sortAndCutWords(rawData, limit);\n\n    options.series = generateSeriesForWordsAnalysis(words);\n    options.xAxis.categories = categories;\n    options.title.text = 'Words Analysis';\n    options.subtitle.text = `${limit} the most frequent words`;\n\n    this.setState({ options, rerenderChart: true }, () => {\n      this.setState({ rerenderChart: false });\n    });\n  }\n\n  addPointsToBalanceSimulation() {\n    const { configurations, options } = this.state;\n    const { isRunning, incomeProbability, expensesProbability } = configurations.balanceSimulation;\n    if (isRunning) {\n      if (options.series[0].data.length < 12) {\n        options.series = newPointsToBalanceSimulation(\n          options.series,\n          incomeProbability,\n          expensesProbability\n        );\n        setTimeout(() => this.addPointsToBalanceSimulation(), 5000);\n        this.setState({ options, rerenderChart: true }, () => {\n          this.setState({ rerenderChart: false });\n        });\n      } else {\n        configurations.balanceSimulation.isRunning = false;\n        this.setState({ configurations });\n      }\n    }\n  }\n\n  dropdownClickHandler(mode) {\n    const { configurations } = this.state;\n    switch (mode) {\n      case modes.pureRandom: {\n        this.initPureRandomeMode();\n        break;\n      }\n      case modes.configurableRandom: {\n        this.initConfigurableRandomeMode();\n        break;\n      }\n      case modes.balanceSimulation: {\n        this.initBalanceSimulationMode();\n        break;\n      }\n      case modes.symbolsAnalysis: {\n        this.initSymbolsAnalysisMode();\n        break;\n      }\n      case modes.wordsAnalysis: {\n        this.initWordsAnalysisMode();\n        break;\n      }\n      case modes.interestingFacts: {\n        this.initInterestingFactsMode();\n        break;\n      }\n      default: {\n        console.log('This is impossible to achieve');\n      }\n    }\n    this.setState({ currentMode: mode, configurations });\n  }\n\n  onPureRandomCheckBoxChange(event) {\n    const { configurations } = this.state;\n    if (configurations.pureRandom[event.target.value]) {\n      configurations.pureRandom[event.target.value] = false;\n    } else {\n      configurations.pureRandom[event.target.value] = true;\n    }\n    this.setState({ configurations });\n  }\n\n  onConfigurableRandomInputChange(event) {\n    const { configurations } = this.state;\n    if (event.target.dataset.type === 'positive') {\n      limitNumericalInput(\n        configurations.configurableRandom,\n        event.target.name,\n        event.target.value,\n        1,\n        20,\n        true\n      );\n    } else if (event.target.dataset.type === 'min') {\n      limitNumericalInput(\n        configurations.configurableRandom,\n        event.target.name,\n        event.target.value,\n        -10000,\n        configurations.configurableRandom.max,\n        false\n      );\n    } else if (event.target.dataset.type === 'max') {\n      limitNumericalInput(\n        configurations.configurableRandom,\n        event.target.name,\n        event.target.value,\n        configurations.configurableRandom.min,\n        10000,\n        false\n      );\n    } else {\n      configurations.configurableRandom[event.target.name] = Number(event.target.value);\n    }\n    this.setState({ configurations });\n  }\n\n  onBalanceSimulationInputChange(event) {\n    const { configurations } = this.state;\n    if (event.target.dataset.type === 'percent') {\n      limitNumericalInput(\n        configurations.balanceSimulation,\n        event.target.name,\n        event.target.value,\n        0,\n        100,\n        true\n      );\n    } else {\n      limitNumericalInput(\n        configurations.balanceSimulation,\n        event.target.name,\n        event.target.value,\n        0,\n        1000000000,\n        true\n      );\n    }\n    this.setState({ configurations });\n  }\n\n  onSymbolAnalysisInputChange(event) {\n    const { configurations } = this.state;\n    if (event.target.name === 'limit') {\n      limitNumericalInput(\n        configurations.symbolsAnalysis,\n        event.target.name,\n        event.target.value,\n        1,\n        1000,\n        true\n      );\n    } else if (event.target.name === 'caseSensitive') {\n      const currentState = configurations.symbolsAnalysis[event.target.name];\n      configurations.symbolsAnalysis[event.target.name] = currentState ? false : true;\n    } else {\n      configurations.symbolsAnalysis[event.target.name] = event.target.value;\n    }\n\n    this.setState({ configurations });\n  }\n\n  onWordsAnalysisInputChange(event) {\n    const { configurations } = this.state;\n    if (event.target.name === 'limit') {\n      limitNumericalInput(\n        configurations.wordsAnalysis,\n        event.target.name,\n        event.target.value,\n        1,\n        1000,\n        true\n      );\n    } else if (event.target.name === 'caseSensitive') {\n      const currentState = configurations.wordsAnalysis[event.target.name];\n      configurations.wordsAnalysis[event.target.name] = currentState ? false : true;\n    } else {\n      configurations.wordsAnalysis[event.target.name] = event.target.value;\n    }\n\n    this.setState({ configurations });\n  }\n\n  onWordsAnalysisTagsChange(newTags) {\n    const { configurations } = this.state;\n    const lastTag = newTags[newTags.length - 1];\n    const alreadyExist = configurations.wordsAnalysis.filter.includes(lastTag);\n    const deleted = configurations.wordsAnalysis.filter.length > newTags.length;\n    if (!alreadyExist || deleted) {\n      configurations.wordsAnalysis.filter = newTags;\n    }\n\n    this.setState({ configurations });\n  }\n\n  onInterestingFactsRadioChange(event) {\n    const { configurations } = this.state;\n    let options = configurations.interestingFacts[event.target.name];\n\n    configurations.interestingFacts.current = event.target.name;\n\n    this.setState({ configurations, options, rerenderChart: true }, () => {\n      this.setState({ rerenderChart: false });\n    });\n  }\n\n  renderOptionsDropdown() {\n    return (\n      <div className=\"dropdown\">\n        <button className=\"btn btn-primary dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">\n          Configurations&nbsp;\n          <span className=\"caret\"></span>\n        </button>\n        <ul className=\"dropdown-menu\">\n          <li className=\"dropdown-header\">Random Data</li>\n          <li className=\"dropdown-menu__item\">\n            <a onClick={() => this.dropdownClickHandler(modes.pureRandom)}>\n              {modes.pureRandom}\n              <Tooltip text={tooltips.pureRandom} addClass=\"dropdown-menu__help\" />\n            </a>\n          </li>\n          <li className=\"dropdown-menu__item\">\n            <a onClick={() => this.dropdownClickHandler(modes.configurableRandom)}>\n              {modes.configurableRandom}\n              <Tooltip text={tooltips.configurableRandom} addClass=\"dropdown-menu__help\" />\n            </a>\n          </li>\n          <li className=\"dropdown-menu__item\">\n            <a onClick={() => this.dropdownClickHandler(modes.balanceSimulation)}>\n              {modes.balanceSimulation}\n              <Tooltip text={tooltips.balanceSimulation} addClass=\"dropdown-menu__help\" />\n            </a>\n          </li>\n          <li className=\"divider\"></li>\n          <li className=\"dropdown-header\">Text Analysis</li>\n          <li className=\"dropdown-menu__item\">\n            <a onClick={() => this.dropdownClickHandler(modes.symbolsAnalysis)}>\n              {modes.symbolsAnalysis}\n              <Tooltip text={tooltips.symbolsAnalysis} addClass=\"dropdown-menu__help\" />\n            </a>\n          </li>\n          <li className=\"dropdown-menu__item\">\n            <a onClick={() => this.dropdownClickHandler(modes.wordsAnalysis)}>\n              {modes.wordsAnalysis}\n              <Tooltip text={tooltips.wordsAnalysis} addClass=\"dropdown-menu__help\" />\n            </a>\n          </li>\n          <li className=\"divider\"></li>\n          <li className=\"dropdown-header\">Real World Data</li>\n          <li className=\"dropdown-menu__item\">\n            <a onClick={() => this.dropdownClickHandler(modes.interestingFacts)}>\n              {modes.interestingFacts}\n              <Tooltip text={tooltips.interestingFacts} addClass=\"dropdown-menu__help\" />\n            </a>\n          </li>\n        </ul>\n      </div>\n    );\n  }\n\n  renderPureRandomModeConfiguration() {\n    const { pureRandom } = this.state.configurations;\n    return (\n      <div className=\"pure-random\">\n        <div className=\"checkbox\">\n          <label>\n            <input\n              type=\"checkbox\"\n              value={optionsPureRandom.vertical}\n              checked={pureRandom.vertical}\n              onChange={this.onPureRandomCheckBoxChange}\n            />\n            Vertical\n          </label>\n        </div>\n        <div className=\"checkbox\">\n          <label>\n            <input\n              type=\"checkbox\"\n              value={optionsPureRandom.title}\n              checked={pureRandom.title}\n              onChange={this.onPureRandomCheckBoxChange}\n            />\n            Show Chart Title\n          </label>\n        </div>\n        <div className=\"checkbox\">\n          <label>\n            <input\n              type=\"checkbox\"\n              value={optionsPureRandom.yAxisTitle}\n              checked={pureRandom.yAxisTitle}\n              onChange={this.onPureRandomCheckBoxChange}\n            />\n            Show Axis Title\n          </label>\n        </div>\n        <div className=\"checkbox\">\n          <label>\n            <input\n              type=\"checkbox\"\n              value={optionsPureRandom.dataLabels}\n              checked={pureRandom.dataLabels}\n              onChange={this.onPureRandomCheckBoxChange}\n            />\n            Show Data Labels\n          </label>\n        </div>\n        <div className=\"checkbox\">\n          <label>\n            <input\n              type=\"checkbox\"\n              value={optionsPureRandom.legend}\n              checked={pureRandom.legend}\n              onChange={this.onPureRandomCheckBoxChange}\n            />\n            Show Legend\n          </label>\n        </div>\n        <div className=\"checkbox\">\n          <label>\n            <input\n              type=\"checkbox\"\n              value={optionsPureRandom.tooltip}\n              checked={pureRandom.tooltip}\n              onChange={this.onPureRandomCheckBoxChange}\n            />\n            Enable Tooltip\n          </label>\n        </div>\n        <div className=\"checkbox\">\n          <label>\n            <input\n              type=\"checkbox\"\n              value={optionsPureRandom.zoom}\n              checked={pureRandom.zoom}\n              onChange={this.onPureRandomCheckBoxChange}\n            />\n            Enable Zoom\n          </label>\n        </div>\n        <div className=\"checkbox\">\n          <label>\n            <input\n              type=\"checkbox\"\n              value={optionsPureRandom.animation}\n              checked={pureRandom.animation}\n              onChange={this.onPureRandomCheckBoxChange}\n            />\n            Enable Animation\n          </label>\n        </div>\n        <div className=\"checkbox\">\n          <label>\n            <input\n              type=\"checkbox\"\n              value={optionsPureRandom.stacking}\n              checked={pureRandom.stacking}\n              onChange={this.onPureRandomCheckBoxChange}\n            />\n            Stacked Mode\n          </label>\n        </div>\n\n        <button\n          type=\"button\"\n          className=\"btn btn-success apply-button\"\n          onClick={this.updatePureRandomConfiguration}\n        >\n          Apply\n        </button>\n      </div>\n    );\n  }\n\n  renderConfigurableRandomModeConfiguration() {\n    const { configurableRandom } = this.state.configurations;\n    return (\n      <div className=\"configurable-random\">\n        <div className=\"form-group config-option\">\n          <label>Number of series</label>\n          <input\n            type=\"number\"\n            data-type=\"positive\"\n            className=\"form-control\"\n            name={optionsConfigurableRandom.seriesNumber}\n            value={configurableRandom.seriesNumber}\n            onChange={this.onConfigurableRandomInputChange}\n          />\n        </div>\n        <div className=\"form-group config-option\">\n          <label>Number of categories</label>\n          <input\n            type=\"number\"\n            data-type=\"positive\"\n            className=\"form-control\"\n            name={optionsConfigurableRandom.categoriesNumber}\n            value={configurableRandom.categoriesNumber}\n            onChange={this.onConfigurableRandomInputChange}\n          />\n        </div>\n        <div className=\"form-group config-option\">\n          <label>Min value</label>\n          <input\n            type=\"number\"\n            className=\"form-control\"\n            data-type=\"min\"\n            name={optionsConfigurableRandom.min}\n            value={configurableRandom.min}\n            onChange={this.onConfigurableRandomInputChange}\n          />\n        </div>\n        <div className=\"form-group config-option\">\n          <label>Max value</label>\n          <input\n            type=\"number\"\n            data-type=\"max\"\n            className=\"form-control\"\n            name={optionsConfigurableRandom.max}\n            value={configurableRandom.max}\n            onChange={this.onConfigurableRandomInputChange}\n          />\n        </div>\n\n        <button\n          type=\"button\"\n          className=\"btn btn-success apply-button position-dynamic\"\n          onClick={this.updateConfigurableRandomConfiguration}\n        >\n          Apply\n        </button>\n      </div>\n    );\n  }\n\n  renderBalanceSimulationModeConfiguration() {\n    const { balanceSimulation } = this.state.configurations;\n    return (\n      <div className=\"balance-simulation\">\n        <div className=\"form-group config-option\">\n          <label>Initial Income ($)</label>\n          <input\n            type=\"number\"\n            className=\"form-control\"\n            name={optionsBalanceSimulation.initIncome}\n            value={balanceSimulation.initIncome}\n            onChange={this.onBalanceSimulationInputChange}\n          />\n        </div>\n        <div className=\"form-group config-option\">\n          <label>Initial Expenses ($)</label>\n          <input\n            type=\"number\"\n            className=\"form-control\"\n            name={optionsBalanceSimulation.initExpenses}\n            value={balanceSimulation.initExpenses}\n            onChange={this.onBalanceSimulationInputChange}\n          />\n        </div>\n        <div className=\"form-group config-option\">\n          <label>Income change probability (%)</label>\n          <input\n            type=\"number\"\n            className=\"form-control\"\n            data-type=\"percent\"\n            name={optionsBalanceSimulation.incomeProbability}\n            value={balanceSimulation.incomeProbability}\n            onChange={this.onBalanceSimulationInputChange}\n          />\n        </div>\n        <div className=\"form-group config-option\">\n          <label>Expenses change probability (%)</label>\n          <input\n            type=\"number\"\n            data-type=\"percent\"\n            className=\"form-control\"\n            name={optionsBalanceSimulation.expensesProbability}\n            value={balanceSimulation.expensesProbability}\n            onChange={this.onBalanceSimulationInputChange}\n          />\n        </div>\n\n        {balanceSimulation.isRunning ? (\n          <button\n            type=\"button\"\n            className=\"btn btn-danger apply-button position-dynamic\"\n            onClick={this.updateBalanceSimulationConfiguration}\n          >\n            Stop Simulation\n          </button>\n        ) : (\n          <button\n            type=\"button\"\n            className=\"btn btn-success apply-button position-dynamic\"\n            onClick={this.updateBalanceSimulationConfiguration}\n          >\n            Start Simulation\n          </button>\n        )}\n      </div>\n    );\n  }\n\n  renderSymbolsAnalysisModeConfiguration() {\n    const { symbolsAnalysis } = this.state.configurations;\n    return (\n      <div className=\"symbols-analysis\">\n        <div className=\"form-group config-option\">\n          <label>Text for analysis</label>\n          <textarea\n            className=\"form-control input-textarea\"\n            name={optionsSymbolsAnalysis.text}\n            value={symbolsAnalysis.text}\n            onChange={this.onSymbolAnalysisInputChange}\n          />\n        </div>\n\n        <div className=\"row basic-config\">\n          <div className=\"col-md-6\">\n            <div className=\"form-group config-option\">\n              <label>Number of chars</label>\n              <input\n                type=\"number\"\n                className=\"form-control\"\n                name={optionsSymbolsAnalysis.limit}\n                value={symbolsAnalysis.limit}\n                onChange={this.onSymbolAnalysisInputChange}\n              />\n            </div>\n          </div>\n          <div className=\"col-md-6\">\n            <div className=\"form-group config-option\">\n              <label>Filter next chars</label>\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                name={optionsSymbolsAnalysis.filter}\n                value={symbolsAnalysis.filter}\n                onChange={this.onSymbolAnalysisInputChange}\n              />\n            </div>\n          </div>\n        </div>\n\n        <div className=\"checkbox\">\n          <label>\n            <input\n              type=\"checkbox\"\n              value={optionsSymbolsAnalysis.caseSensitive}\n              name={optionsSymbolsAnalysis.caseSensitive}\n              checked={symbolsAnalysis.caseSensitive}\n              onChange={this.onSymbolAnalysisInputChange}\n            />\n            Case Sensitive\n          </label>\n        </div>\n\n        <button\n          type=\"button\"\n          className=\"btn btn-success apply-button position-dynamic\"\n          onClick={this.updateSymbolsAnalysisConfiguration}\n        >\n          Results\n        </button>\n      </div>\n    );\n  }\n\n  renderWordsAnalysisModeConfiguration() {\n    const { wordsAnalysis } = this.state.configurations;\n    return (\n      <div className=\"words-analysis\">\n        <div className=\"form-group config-option\">\n          <label>Text for analysis</label>\n          <textarea\n            className=\"form-control input-textarea\"\n            name={optionsWordsAnalysis.text}\n            value={wordsAnalysis.text}\n            onChange={this.onWordsAnalysisInputChange}\n          />\n        </div>\n\n        <div className=\"form-group config-option\">\n          <label>Filter next words</label>\n          <TagsInput value={wordsAnalysis.filter} onChange={this.onWordsAnalysisTagsChange} />\n        </div>\n\n        <div className=\"form-group config-option\">\n          <label>Number of words</label>\n          <input\n            type=\"number\"\n            className=\"form-control\"\n            name={optionsWordsAnalysis.limit}\n            value={wordsAnalysis.limit}\n            onChange={this.onWordsAnalysisInputChange}\n          />\n        </div>\n\n        <div className=\"checkbox\">\n          <label>\n            <input\n              type=\"checkbox\"\n              value={optionsWordsAnalysis.caseSensitive}\n              name={optionsWordsAnalysis.caseSensitive}\n              checked={wordsAnalysis.caseSensitive}\n              onChange={this.onWordsAnalysisInputChange}\n            />\n            Case Sensitive\n          </label>\n        </div>\n\n        <button\n          type=\"button\"\n          className=\"btn btn-success apply-button position-dynamic\"\n          onClick={this.updateWordsAnalysisConfiguration}\n        >\n          Results\n        </button>\n      </div>\n    );\n  }\n\n  renderInterestingFactsModeConfiguration() {\n    const { interestingFacts } = this.state.configurations;\n    return (\n      <div className=\"interesting-facts\">\n        <div className=\"radio\">\n          <label>\n            <input\n              type=\"radio\"\n              name={optionsInterestingFacts.first}\n              checked={interestingFacts.current === optionsInterestingFacts.first}\n              onChange={this.onInterestingFactsRadioChange}\n            />\n            First\n          </label>\n        </div>\n        <div className=\"radio\">\n          <label>\n            <input\n              type=\"radio\"\n              name={optionsInterestingFacts.second}\n              checked={interestingFacts.current === optionsInterestingFacts.second}\n              onChange={this.onInterestingFactsRadioChange}\n            />\n            Second\n          </label>\n        </div>\n        <div className=\"radio\">\n          <label>\n            <input\n              type=\"radio\"\n              name={optionsInterestingFacts.third}\n              checked={interestingFacts.current === optionsInterestingFacts.third}\n              onChange={this.onInterestingFactsRadioChange}\n            />\n            Third\n          </label>\n        </div>\n      </div>\n    );\n  }\n\n  renderConfigurationsArea() {\n    const { currentMode } = this.state;\n    switch (currentMode) {\n      case modes.pureRandom: {\n        return this.renderPureRandomModeConfiguration();\n      }\n      case modes.configurableRandom: {\n        return this.renderConfigurableRandomModeConfiguration();\n      }\n      case modes.balanceSimulation: {\n        return this.renderBalanceSimulationModeConfiguration();\n      }\n      case modes.symbolsAnalysis: {\n        return this.renderSymbolsAnalysisModeConfiguration();\n      }\n      case modes.wordsAnalysis: {\n        return this.renderWordsAnalysisModeConfiguration();\n      }\n      case modes.interestingFacts: {\n        return this.renderInterestingFactsModeConfiguration();\n      }\n      default: {\n        return null;\n      }\n    }\n  }\n\n  render() {\n    console.log('bar state: ', this.state);\n    return (\n      <div className=\"bar-page\" key={`bar-chart-${this.state.currentMode}`}>\n        <div className=\"row\">\n          <div className=\"col-sm-4\">\n            {this.renderOptionsDropdown()}\n            <div className=\"configuration-area\">{this.renderConfigurationsArea()}</div>\n          </div>\n          <div className=\"col-sm-8 chart-area\">\n            <Chart\n              container={'bar-chart'}\n              options={this.state.options}\n              update={this.state.rerenderChart}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","/Users/dkoval/dev/React-Highcharts/src/components/charts/chart-abstract.js",[],"/Users/dkoval/dev/React-Highcharts/src/components/charts/line.js",["152","153","154","155","156","157","158"],"import React, { Component } from 'react';\n\nimport Chart from './chart-abstract';\nimport Stock from './stock-abstract';\nimport Tooltip from '../tooltip';\n\nimport {\n  pureRandom,\n  configurableRandom,\n  stockSimulation,\n  functions,\n  interestingFactsTemperature,\n} from '../../constants/line/default-options-line';\n\nimport {\n  modes,\n  tooltips,\n  initialState,\n  optionsPureRandom,\n  optionsConfigurableRandom,\n  optionsStockSimulation,\n  optionsPolynomials,\n  optionsTrigonometric,\n  optionsInterestingFacts,\n} from '../../constants/line/modes-options-line';\n\nimport {\n  generateSeriesForPureRandom,\n  generateSeriesForConfigurableRandom,\n  generateSeriesForStockSimulation,\n  newPointToStockSimulation,\n  generateSeriesForPolynomials,\n  generateSeriesForTrigonometric,\n} from '../../constants/line/data-helpers-line';\n\nimport { limitNumericalInput } from '../../constants/shared/helpers';\n\nexport default class Line extends Component {\n  constructor(props) {\n    super(props);\n    this.state = initialState;\n\n    this.dropdownClickHandler = this.dropdownClickHandler.bind(this);\n    this.updatePureRandomConfiguration = this.updatePureRandomConfiguration.bind(this);\n    this.updateConfigurableRandomConfiguration = this.updateConfigurableRandomConfiguration.bind(\n      this\n    );\n    this.updateStockSimulationConfiguration = this.updateStockSimulationConfiguration.bind(this);\n    this.updatePolynomialsConfiguration = this.updatePolynomialsConfiguration.bind(this);\n    this.updateTrigonometricConfiguration = this.updateTrigonometricConfiguration.bind(this);\n    this.onPureRandomCheckBoxChange = this.onPureRandomCheckBoxChange.bind(this);\n    this.onConfigurableRandomInputChange = this.onConfigurableRandomInputChange.bind(this);\n    this.onStockSimulationInputChange = this.onStockSimulationInputChange.bind(this);\n    this.onPolynomialsInputChange = this.onPolynomialsInputChange.bind(this);\n    this.onTrigonometricInputChange = this.onTrigonometricInputChange.bind(this);\n    this.onInterestingFactsRadioChange = this.onInterestingFactsRadioChange.bind(this);\n  }\n\n  componentDidMount() {\n    this.initPureRandomeMode();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    $(this.refs.priceTooltip).tooltip();\n    $(this.refs.oscilationTooltip).tooltip();\n    $(this.refs.frequencyTooltip).tooltip();\n  }\n\n  initPureRandomeMode() {\n    let options = pureRandom;\n    options.series = generateSeriesForPureRandom();\n    this.setState({ options }, () => {\n      this.updatePureRandomConfiguration();\n    });\n  }\n\n  initConfigurableRandomeMode() {\n    let options = configurableRandom;\n    this.setState({ options }, () => {\n      this.updateConfigurableRandomConfiguration();\n    });\n  }\n\n  initStockSimulationMode() {\n    let options = stockSimulation;\n    const { name, price } = this.state.configurations.stockSimulation;\n    options.series = generateSeriesForStockSimulation(price);\n    this.setState({ options }, () => {\n      this.updateStockSimulationConfiguration();\n    });\n  }\n\n  initPolynomialsMode() {\n    let options = functions;\n    this.setState({ options }, () => {\n      this.updatePolynomialsConfiguration();\n    });\n  }\n\n  initTrigonometricMode() {\n    let options = functions;\n    this.setState({ options }, () => {\n      this.updateTrigonometricConfiguration();\n    });\n  }\n\n  initInterestingFactsMode() {\n    let options = interestingFactsTemperature;\n    this.setState({ options, rerenderChart: true }, () => {\n      this.setState({ rerenderChart: false });\n    });\n  }\n\n  updatePureRandomConfiguration() {\n    const { pureRandom } = this.state.configurations;\n    const { options } = this.state;\n    options.chart.zoomType = pureRandom.zoom ? 'xy' : null;\n    options.chart.type = pureRandom.area ? 'area' : 'line';\n    options.title.text = pureRandom.title ? 'Randomly generated data' : null;\n    options.subtitle.text = pureRandom.title ? 'Randomly generated data' : null;\n    options.legend.enabled = pureRandom.legend;\n    options.yAxis.title.text = pureRandom.yAxisTitle ? 'Random Value (UOM)' : null;\n    options.plotOptions.line.dataLabels.enabled = pureRandom.dataLabels;\n    options.plotOptions.area.dataLabels.enabled = pureRandom.dataLabels;\n    options.plotOptions.line.enableMouseTracking = pureRandom.tooltip;\n    options.plotOptions.area.enableMouseTracking = pureRandom.tooltip;\n    options.plotOptions.series.animation = pureRandom.animation;\n    options.plotOptions.series.marker.enabled = pureRandom.markers;\n\n    this.setState({ options, rerenderChart: true }, () => {\n      this.setState({ rerenderChart: false });\n    });\n  }\n\n  updateConfigurableRandomConfiguration() {\n    const { configurableRandom } = this.state.configurations;\n    const { options } = this.state;\n\n    const series = generateSeriesForConfigurableRandom(configurableRandom);\n    options.series = series;\n\n    this.setState({ options, rerenderChart: true }, () => {\n      this.setState({ rerenderChart: false });\n    });\n  }\n\n  updateStockSimulationConfiguration(event) {\n    const { configurations, options } = this.state;\n    const { name, isRunning, price } = configurations.stockSimulation;\n    options.title.text = name ? 'Stock price of ' + name : null;\n    if (event) {\n      if (isRunning) {\n        options.navigator.enabled = true;\n        options.rangeSelector.enabled = true;\n        configurations.stockSimulation.isRunning = false;\n        this.setState({ options, configurations, rerenderChart: true }, () => {\n          this.setState({ rerenderChart: false });\n        });\n      } else {\n        options.navigator.enabled = false;\n        options.rangeSelector.enabled = false;\n        options.series = generateSeriesForStockSimulation(price);\n        configurations.stockSimulation.isRunning = true;\n        this.setState({ configurations }, () => {\n          this.addPointToStockSimulation();\n        });\n      }\n    } else {\n      this.setState({ options, rerenderChart: true }, () => {\n        this.setState({ rerenderChart: false });\n      });\n    }\n  }\n\n  addPointToStockSimulation() {\n    const { configurations, options } = this.state;\n    const { isRunning, oscillation, frequency } = configurations.stockSimulation;\n    if (isRunning) {\n      options.series = newPointToStockSimulation(options.series, oscillation);\n      setTimeout(() => this.addPointToStockSimulation(), frequency * 1000);\n      this.setState({ options, rerenderChart: true }, () => {\n        this.setState({ rerenderChart: false });\n      });\n    }\n  }\n\n  updatePolynomialsConfiguration() {\n    const { polynomials } = this.state.configurations;\n    const { options } = this.state;\n\n    const series = generateSeriesForPolynomials(polynomials);\n    options.title.text = modes.polynomials;\n    options.series = series;\n\n    this.setState({ options, rerenderChart: true }, () => {\n      this.setState({ rerenderChart: false });\n    });\n  }\n\n  updateTrigonometricConfiguration() {\n    const { trigonometric } = this.state.configurations;\n    const { options } = this.state;\n\n    const series = generateSeriesForTrigonometric(trigonometric);\n    options.title.text = modes.trigonometric;\n    options.series = series;\n\n    this.setState({ options, rerenderChart: true }, () => {\n      this.setState({ rerenderChart: false });\n    });\n  }\n\n  dropdownClickHandler(mode) {\n    const { configurations } = this.state;\n    configurations.stockSimulation.isRunning = false;\n    switch (mode) {\n      case modes.pureRandom: {\n        this.initPureRandomeMode();\n        break;\n      }\n      case modes.configurableRandom: {\n        this.initConfigurableRandomeMode();\n        break;\n      }\n      case modes.stockSimulation: {\n        this.initStockSimulationMode();\n        break;\n      }\n      case modes.polynomials: {\n        this.initPolynomialsMode();\n        break;\n      }\n      case modes.trigonometric: {\n        this.initTrigonometricMode();\n        break;\n      }\n      case modes.interestingFacts: {\n        this.initInterestingFactsMode();\n        break;\n      }\n      default: {\n        console.log('This is impossible to achieve');\n      }\n    }\n    this.setState({ currentMode: mode, configurations });\n  }\n\n  renderOptionsDropdown() {\n    return (\n      <div className=\"dropdown\">\n        <button className=\"btn btn-primary dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">\n          Configurations&nbsp;\n          <span className=\"caret\"></span>\n        </button>\n        <ul className=\"dropdown-menu\">\n          <li className=\"dropdown-header\">Random Data</li>\n          <li className=\"dropdown-menu__item\">\n            <a onClick={() => this.dropdownClickHandler(modes.pureRandom)}>\n              {modes.pureRandom}\n              <Tooltip text={tooltips.pureRandom} addClass=\"dropdown-menu__help\" />\n            </a>\n          </li>\n          <li className=\"dropdown-menu__item\">\n            <a onClick={() => this.dropdownClickHandler(modes.configurableRandom)}>\n              {modes.configurableRandom}\n              <Tooltip text={tooltips.configurableRandom} addClass=\"dropdown-menu__help\" />\n            </a>\n          </li>\n          <li className=\"dropdown-menu__item\">\n            <a onClick={() => this.dropdownClickHandler(modes.stockSimulation)}>\n              {modes.stockSimulation}\n              <Tooltip text={tooltips.stockSimulation} addClass=\"dropdown-menu__help\" />\n            </a>\n          </li>\n          <li className=\"divider\"></li>\n          <li className=\"dropdown-header\">Functions Visualization</li>\n          <li className=\"dropdown-menu__item\">\n            <a onClick={() => this.dropdownClickHandler(modes.polynomials)}>\n              {modes.polynomials}\n              <Tooltip text={tooltips.polynomials} addClass=\"dropdown-menu__help\" />\n            </a>\n          </li>\n          <li className=\"dropdown-menu__item\">\n            <a onClick={() => this.dropdownClickHandler(modes.trigonometric)}>\n              {modes.trigonometric}\n              <Tooltip text={tooltips.trigonometric} addClass=\"dropdown-menu__help\" />\n            </a>\n          </li>\n          <li className=\"divider\"></li>\n          <li className=\"dropdown-header\">Real World Data</li>\n          <li className=\"dropdown-menu__item\">\n            <a onClick={() => this.dropdownClickHandler(modes.interestingFacts)}>\n              {modes.interestingFacts}\n              <Tooltip text={tooltips.interestingFacts} addClass=\"dropdown-menu__help\" />\n            </a>\n          </li>\n        </ul>\n      </div>\n    );\n  }\n\n  onPureRandomCheckBoxChange(event) {\n    const { configurations } = this.state;\n    if (configurations.pureRandom[event.target.value]) {\n      configurations.pureRandom[event.target.value] = false;\n    } else {\n      configurations.pureRandom[event.target.value] = true;\n    }\n    this.setState({ configurations });\n  }\n\n  onConfigurableRandomInputChange(event) {\n    const { configurations } = this.state;\n    if (event.target.dataset.type === 'series') {\n      limitNumericalInput(\n        configurations.configurableRandom,\n        event.target.name,\n        event.target.value,\n        1,\n        20,\n        true\n      );\n    } else if (event.target.dataset.type === 'points') {\n      limitNumericalInput(\n        configurations.configurableRandom,\n        event.target.name,\n        event.target.value,\n        1,\n        1000,\n        true\n      );\n    } else if (event.target.dataset.type === 'min') {\n      limitNumericalInput(\n        configurations.configurableRandom,\n        event.target.name,\n        event.target.value,\n        -10000,\n        configurations.configurableRandom.max,\n        false\n      );\n    } else if (event.target.dataset.type === 'max') {\n      limitNumericalInput(\n        configurations.configurableRandom,\n        event.target.name,\n        event.target.value,\n        configurations.configurableRandom.min,\n        10000,\n        false\n      );\n    } else {\n      configurations.configurableRandom[event.target.name] = Number(event.target.value);\n    }\n    this.setState({ configurations });\n  }\n\n  onStockSimulationInputChange(event) {\n    const { configurations } = this.state;\n    if (event.target.type === 'number') {\n      limitNumericalInput(\n        configurations.stockSimulation,\n        event.target.name,\n        event.target.value,\n        0.01,\n        1000000,\n        false\n      );\n    } else {\n      configurations.stockSimulation[event.target.name] = event.target.value;\n    }\n    this.setState({ configurations });\n  }\n\n  onPolynomialsInputChange(event) {\n    const { configurations } = this.state;\n    if (event.target.dataset.type === 'integer') {\n      limitNumericalInput(\n        configurations.polynomials,\n        event.target.name,\n        event.target.value,\n        1,\n        1000,\n        true\n      );\n    } else if (event.target.dataset.type === 'min') {\n      limitNumericalInput(\n        configurations.polynomials,\n        event.target.name,\n        event.target.value,\n        -10000,\n        configurations.polynomials.max,\n        false\n      );\n    } else if (event.target.dataset.type === 'max') {\n      limitNumericalInput(\n        configurations.polynomials,\n        event.target.name,\n        event.target.value,\n        configurations.polynomials.min,\n        10000,\n        false\n      );\n    } else {\n      configurations.polynomials[event.target.name] = Number(event.target.value);\n    }\n    this.setState({ configurations });\n  }\n\n  onTrigonometricInputChange(event) {\n    const { configurations } = this.state;\n    if (event.target.dataset.type === 'integer') {\n      limitNumericalInput(\n        configurations.trigonometric,\n        event.target.name,\n        event.target.value,\n        1,\n        1000,\n        true\n      );\n    } else if (event.target.dataset.type === 'min') {\n      limitNumericalInput(\n        configurations.trigonometric,\n        event.target.name,\n        event.target.value,\n        -10000,\n        configurations.trigonometric.max,\n        false\n      );\n    } else if (event.target.dataset.type === 'max') {\n      limitNumericalInput(\n        configurations.trigonometric,\n        event.target.name,\n        event.target.value,\n        configurations.trigonometric.min,\n        10000,\n        false\n      );\n    } else {\n      configurations.trigonometric[event.target.name] = Number(event.target.value);\n    }\n    this.setState({ configurations });\n  }\n\n  onInterestingFactsRadioChange(event) {\n    const { configurations } = this.state;\n    let options = configurations.interestingFacts[event.target.name];\n    configurations.interestingFacts.current = event.target.name;\n    this.setState({ configurations, options, rerenderChart: true }, () => {\n      this.setState({ rerenderChart: false });\n    });\n  }\n\n  renderPureRandomModeConfiguration() {\n    const { pureRandom } = this.state.configurations;\n    return (\n      <div className=\"pure-random\">\n        <div className=\"checkbox\">\n          <label>\n            <input\n              type=\"checkbox\"\n              value={optionsPureRandom.title}\n              checked={pureRandom.title}\n              onChange={this.onPureRandomCheckBoxChange}\n            />\n            Show Chart Title\n          </label>\n        </div>\n        <div className=\"checkbox\">\n          <label>\n            <input\n              type=\"checkbox\"\n              value={optionsPureRandom.yAxisTitle}\n              checked={pureRandom.yAxisTitle}\n              onChange={this.onPureRandomCheckBoxChange}\n            />\n            Show Y-Axis Title\n          </label>\n        </div>\n        <div className=\"checkbox\">\n          <label>\n            <input\n              type=\"checkbox\"\n              value={optionsPureRandom.markers}\n              checked={pureRandom.markers}\n              onChange={this.onPureRandomCheckBoxChange}\n            />\n            Show Point Markers\n          </label>\n        </div>\n        <div className=\"checkbox\">\n          <label>\n            <input\n              type=\"checkbox\"\n              value={optionsPureRandom.dataLabels}\n              checked={pureRandom.dataLabels}\n              onChange={this.onPureRandomCheckBoxChange}\n            />\n            Show Data Labels\n          </label>\n        </div>\n        <div className=\"checkbox\">\n          <label>\n            <input\n              type=\"checkbox\"\n              value={optionsPureRandom.legend}\n              checked={pureRandom.legend}\n              onChange={this.onPureRandomCheckBoxChange}\n            />\n            Show Legend\n          </label>\n        </div>\n        <div className=\"checkbox\">\n          <label>\n            <input\n              type=\"checkbox\"\n              value={optionsPureRandom.tooltip}\n              checked={pureRandom.tooltip}\n              onChange={this.onPureRandomCheckBoxChange}\n            />\n            Enable Tooltip\n          </label>\n        </div>\n        <div className=\"checkbox\">\n          <label>\n            <input\n              type=\"checkbox\"\n              value={optionsPureRandom.zoom}\n              checked={pureRandom.zoom}\n              onChange={this.onPureRandomCheckBoxChange}\n            />\n            Enable Zoom\n          </label>\n        </div>\n        <div className=\"checkbox\">\n          <label>\n            <input\n              type=\"checkbox\"\n              value={optionsPureRandom.animation}\n              checked={pureRandom.animation}\n              onChange={this.onPureRandomCheckBoxChange}\n            />\n            Enable Animation\n          </label>\n        </div>\n        <div className=\"checkbox\">\n          <label>\n            <input\n              type=\"checkbox\"\n              value={optionsPureRandom.area}\n              checked={pureRandom.area}\n              onChange={this.onPureRandomCheckBoxChange}\n            />\n            Use Areas\n          </label>\n        </div>\n\n        <button\n          type=\"button\"\n          className=\"btn btn-success apply-button\"\n          onClick={this.updatePureRandomConfiguration}\n        >\n          Apply\n        </button>\n      </div>\n    );\n  }\n\n  renderConfigurableRandomModeConfiguration() {\n    const { configurableRandom } = this.state.configurations;\n    return (\n      <div className=\"configurable-random\">\n        <div className=\"form-group config-option\">\n          <label>Number of series</label>\n          <input\n            type=\"number\"\n            data-type=\"series\"\n            className=\"form-control\"\n            name={optionsConfigurableRandom.seriesNumber}\n            value={configurableRandom.seriesNumber}\n            onChange={this.onConfigurableRandomInputChange}\n          />\n        </div>\n        <div className=\"form-group config-option\">\n          <label>Max number of points</label>\n          <input\n            type=\"number\"\n            data-type=\"points\"\n            className=\"form-control\"\n            name={optionsConfigurableRandom.pointsNumber}\n            value={configurableRandom.pointsNumber}\n            onChange={this.onConfigurableRandomInputChange}\n          />\n        </div>\n        <div className=\"form-group config-option\">\n          <label>Min value</label>\n          <input\n            type=\"number\"\n            data-type=\"min\"\n            className=\"form-control\"\n            name={optionsConfigurableRandom.min}\n            value={configurableRandom.min}\n            onChange={this.onConfigurableRandomInputChange}\n          />\n        </div>\n        <div className=\"form-group config-option\">\n          <label>Max value</label>\n          <input\n            type=\"number\"\n            data-type=\"max\"\n            className=\"form-control\"\n            name={optionsConfigurableRandom.max}\n            value={configurableRandom.max}\n            onChange={this.onConfigurableRandomInputChange}\n          />\n        </div>\n\n        <button\n          type=\"button\"\n          className=\"btn btn-success apply-button position-dynamic\"\n          onClick={this.updateConfigurableRandomConfiguration}\n        >\n          Apply\n        </button>\n      </div>\n    );\n  }\n\n  renderStockSimulationModeConfiguration() {\n    const { stockSimulation } = this.state.configurations;\n    return (\n      <div className=\"stock-simulation\">\n        <div className=\"form-group\">\n          <label>Name of the Stock</label>\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            name={optionsStockSimulation.name}\n            value={stockSimulation.name}\n            onChange={this.onStockSimulationInputChange}\n          />\n        </div>\n        <div className=\"form-group\">\n          <label\n            data-toggle=\"tooltip\"\n            ref=\"priceTooltip\"\n            title=\"This is a starting price of the stock (in $).\"\n          >\n            � Start Price\n          </label>\n          <input\n            type=\"number\"\n            className=\"form-control\"\n            name={optionsStockSimulation.price}\n            value={stockSimulation.price}\n            onChange={this.onStockSimulationInputChange}\n          />\n        </div>\n        <div className=\"row\">\n          <div className=\"col-xs-6\">\n            <div className=\"form-group config-option\">\n              <label\n                data-toggle=\"tooltip\"\n                ref=\"oscilationTooltip\"\n                title=\"This number means the maximum difference (in $) between the old price and the new one.\"\n              >\n                � Oscillation\n              </label>\n              <input\n                type=\"number\"\n                className=\"form-control\"\n                name={optionsStockSimulation.oscillation}\n                value={stockSimulation.oscillation}\n                onChange={this.onStockSimulationInputChange}\n              />\n            </div>\n          </div>\n          <div className=\"col-xs-6\">\n            <div className=\"form-group config-option\">\n              <label\n                data-toggle=\"tooltip\"\n                ref=\"frequencyTooltip\"\n                title=\"This number means how often (in seconds) the new price will appear.\"\n              >\n                � Frequency\n              </label>\n              <input\n                type=\"number\"\n                className=\"form-control\"\n                name={optionsStockSimulation.frequency}\n                value={stockSimulation.frequency}\n                onChange={this.onStockSimulationInputChange}\n              />\n            </div>\n          </div>\n        </div>\n        {stockSimulation.isRunning ? (\n          <button\n            type=\"button\"\n            className=\"btn btn-danger apply-button\"\n            onClick={this.updateStockSimulationConfiguration}\n          >\n            Stop Simulation\n          </button>\n        ) : (\n          <button\n            type=\"button\"\n            className=\"btn btn-success apply-button\"\n            onClick={this.updateStockSimulationConfiguration}\n          >\n            Start Simulation\n          </button>\n        )}\n      </div>\n    );\n  }\n\n  renderPolynomialsModeConfiguration() {\n    const { polynomials } = this.state.configurations;\n    return (\n      <div className=\"functions\">\n        {this.renderBasicConfigPolynomials(polynomials)}\n\n        <h3>Functions:</h3>\n\n        {this.renderLinearConfigPolynomials(polynomials)}\n        {this.renderQuadraticConfigPolynomials(polynomials)}\n        {this.renderCubicConfigPolynomials(polynomials)}\n\n        <button\n          type=\"button\"\n          className=\"btn btn-success apply-button position-dynamic\"\n          onClick={this.updatePolynomialsConfiguration}\n        >\n          Apply\n        </button>\n      </div>\n    );\n  }\n\n  renderBasicConfigPolynomials(polynomials) {\n    return (\n      <div className=\"row basic-config\">\n        <div className=\"col-md-4\">\n          <div className=\"form-group config-option\">\n            <label>Min X</label>\n            <input\n              type=\"number\"\n              data-type=\"min\"\n              className=\"form-control\"\n              name={optionsPolynomials.min}\n              value={polynomials.min}\n              onChange={this.onPolynomialsInputChange}\n            />\n          </div>\n        </div>\n        <div className=\"col-md-4\">\n          <div className=\"form-group config-option\">\n            <label>Max X</label>\n            <input\n              type=\"number\"\n              data-type=\"max\"\n              className=\"form-control\"\n              name={optionsPolynomials.max}\n              value={polynomials.max}\n              onChange={this.onPolynomialsInputChange}\n            />\n          </div>\n        </div>\n        <div className=\"col-md-4\">\n          <div className=\"form-group config-option\">\n            <label>Count X</label>\n            <input\n              type=\"number\"\n              data-type=\"integer\"\n              className=\"form-control\"\n              name={optionsPolynomials.number}\n              value={polynomials.number}\n              onChange={this.onPolynomialsInputChange}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  renderLinearConfigPolynomials(polynomials) {\n    return (\n      <div className=\"function-config\">\n        <div>\n          <p>\n            <i>y</i> = <b>A</b> · <i>x</i> + <b>B</b>\n          </p>\n        </div>\n        <div>\n          <span className=\"coefficient\">\n            A ={' '}\n            <input\n              type=\"number\"\n              className=\"form-control modified\"\n              name={optionsPolynomials.linearA}\n              value={polynomials.linearA}\n              onChange={this.onPolynomialsInputChange}\n            />\n          </span>\n          <span className=\"coefficient\">\n            B ={' '}\n            <input\n              type=\"number\"\n              className=\"form-control modified\"\n              name={optionsPolynomials.linearB}\n              value={polynomials.linearB}\n              onChange={this.onPolynomialsInputChange}\n            />\n          </span>\n        </div>\n      </div>\n    );\n  }\n\n  renderQuadraticConfigPolynomials(polynomials) {\n    return (\n      <div className=\"function-config\">\n        <p>\n          <i>y</i> = <b>A</b> · <i>x</i>\n          <sup>2</sup> + <b>B</b> · <i>x</i> + <b>C</b>\n        </p>\n        <div>\n          <span className=\"coefficient\">\n            A ={' '}\n            <input\n              type=\"number\"\n              className=\"form-control modified\"\n              name={optionsPolynomials.quadraticA}\n              value={polynomials.quadraticA}\n              onChange={this.onPolynomialsInputChange}\n            />\n          </span>\n          <span className=\"coefficient\">\n            B ={' '}\n            <input\n              type=\"number\"\n              className=\"form-control modified\"\n              name={optionsPolynomials.quadraticB}\n              value={polynomials.quadraticB}\n              onChange={this.onPolynomialsInputChange}\n            />\n          </span>\n          <span className=\"coefficient\">\n            C ={' '}\n            <input\n              type=\"number\"\n              className=\"form-control modified\"\n              name={optionsPolynomials.quadraticC}\n              value={polynomials.quadraticC}\n              onChange={this.onPolynomialsInputChange}\n            />\n          </span>\n        </div>\n      </div>\n    );\n  }\n\n  renderCubicConfigPolynomials(polynomials) {\n    return (\n      <div className=\"function-config\">\n        <p>\n          <i>y</i> = <b>A</b> · <i>x</i>\n          <sup>3</sup> + <b>B</b> · <i>x</i>\n          <sup>2</sup> + <b>C</b> · <i>x</i> + <b>D</b>\n        </p>\n        <div>\n          <span className=\"coefficient\">\n            A ={' '}\n            <input\n              type=\"number\"\n              className=\"form-control modified\"\n              name={optionsPolynomials.cubicA}\n              value={polynomials.cubicA}\n              onChange={this.onPolynomialsInputChange}\n            />\n          </span>\n          <span className=\"coefficient\">\n            B ={' '}\n            <input\n              type=\"number\"\n              className=\"form-control modified\"\n              name={optionsPolynomials.cubicB}\n              value={polynomials.cubicB}\n              onChange={this.onPolynomialsInputChange}\n            />\n          </span>\n        </div>\n        <div>\n          <span className=\"coefficient\">\n            C ={' '}\n            <input\n              type=\"number\"\n              className=\"form-control modified\"\n              name={optionsPolynomials.cubicC}\n              value={polynomials.cubicC}\n              onChange={this.onPolynomialsInputChange}\n            />\n          </span>\n          <span className=\"coefficient\">\n            D ={' '}\n            <input\n              type=\"number\"\n              className=\"form-control modified\"\n              name={optionsPolynomials.cubicD}\n              value={polynomials.cubicD}\n              onChange={this.onPolynomialsInputChange}\n            />\n          </span>\n        </div>\n      </div>\n    );\n  }\n\n  renderTrigonometricModeConfiguration() {\n    const { trigonometric } = this.state.configurations;\n    return (\n      <div className=\"functions\">\n        {this.renderBasicConfigTrigonometric(trigonometric)}\n\n        <h3>Functions:</h3>\n\n        {this.renderConfigTrigonometric(\n          'cos',\n          optionsTrigonometric.cosA,\n          optionsTrigonometric.cosB,\n          trigonometric.cosA,\n          trigonometric.cosB\n        )}\n        {this.renderConfigTrigonometric(\n          'sin',\n          optionsTrigonometric.sinA,\n          optionsTrigonometric.sinB,\n          trigonometric.sinA,\n          trigonometric.sinB\n        )}\n        {this.renderConfigTrigonometric(\n          'tg',\n          optionsTrigonometric.tanA,\n          optionsTrigonometric.tanB,\n          trigonometric.tanA,\n          trigonometric.tanB\n        )}\n        {this.renderConfigTrigonometric(\n          'ctg',\n          optionsTrigonometric.ctanA,\n          optionsTrigonometric.ctanB,\n          trigonometric.ctanA,\n          trigonometric.ctanB\n        )}\n\n        <button\n          type=\"button\"\n          className=\"btn btn-success apply-button position-dynamic\"\n          onClick={this.updateTrigonometricConfiguration}\n        >\n          Apply\n        </button>\n      </div>\n    );\n  }\n\n  renderBasicConfigTrigonometric(trigonometric) {\n    return (\n      <div className=\"row basic-config\">\n        <div className=\"col-md-4\">\n          <div className=\"form-group config-option\">\n            <label>Min X</label>\n            <input\n              type=\"number\"\n              data-type=\"min\"\n              className=\"form-control\"\n              name={optionsTrigonometric.min}\n              value={trigonometric.min}\n              onChange={this.onTrigonometricInputChange}\n            />\n          </div>\n        </div>\n        <div className=\"col-md-4\">\n          <div className=\"form-group config-option\">\n            <label>Max X</label>\n            <input\n              type=\"number\"\n              data-type=\"max\"\n              className=\"form-control\"\n              name={optionsTrigonometric.max}\n              value={trigonometric.max}\n              onChange={this.onTrigonometricInputChange}\n            />\n          </div>\n        </div>\n        <div className=\"col-md-4\">\n          <div className=\"form-group config-option\">\n            <label>Count X</label>\n            <input\n              type=\"number\"\n              data-type=\"integer\"\n              className=\"form-control\"\n              name={optionsTrigonometric.number}\n              value={trigonometric.number}\n              onChange={this.onTrigonometricInputChange}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  renderConfigTrigonometric(func, optionsA, optionsB, coefA, coefB) {\n    return (\n      <div className=\"function-config\">\n        <div>\n          <p>\n            <i>y</i> = <b>A</b> · <i>{func}</i>(<b>B</b>·<i>x</i>)\n          </p>\n        </div>\n        <div>\n          <span className=\"coefficient\">\n            A ={' '}\n            <input\n              type=\"number\"\n              className=\"form-control modified\"\n              name={optionsA}\n              value={coefA}\n              onChange={this.onTrigonometricInputChange}\n            />\n          </span>\n          <span className=\"coefficient\">\n            B ={' '}\n            <input\n              type=\"number\"\n              className=\"form-control modified\"\n              name={optionsB}\n              value={coefB}\n              onChange={this.onTrigonometricInputChange}\n            />\n          </span>\n        </div>\n      </div>\n    );\n  }\n\n  renderInterestingFactsModeConfiguration() {\n    const { interestingFacts } = this.state.configurations;\n    return (\n      <div className=\"interesting-facts\">\n        <div className=\"radio\">\n          <label>\n            <input\n              type=\"radio\"\n              name={optionsInterestingFacts.temperature}\n              checked={interestingFacts.current === optionsInterestingFacts.temperature}\n              onChange={this.onInterestingFactsRadioChange}\n            />\n            Temperature\n          </label>\n        </div>\n        <div className=\"radio\">\n          <label>\n            <input\n              type=\"radio\"\n              name={optionsInterestingFacts.population}\n              checked={interestingFacts.current === optionsInterestingFacts.population}\n              onChange={this.onInterestingFactsRadioChange}\n            />\n            Population\n          </label>\n        </div>\n        <div className=\"radio\">\n          <label>\n            <input\n              type=\"radio\"\n              name={optionsInterestingFacts.itGiants}\n              checked={interestingFacts.current === optionsInterestingFacts.itGiants}\n              onChange={this.onInterestingFactsRadioChange}\n            />\n            IT Giants\n          </label>\n        </div>\n      </div>\n    );\n  }\n\n  renderConfigurationsArea() {\n    const { currentMode } = this.state;\n    switch (currentMode) {\n      case modes.pureRandom: {\n        return this.renderPureRandomModeConfiguration();\n      }\n      case modes.configurableRandom: {\n        return this.renderConfigurableRandomModeConfiguration();\n      }\n      case modes.stockSimulation: {\n        return this.renderStockSimulationModeConfiguration();\n      }\n      case modes.polynomials: {\n        return this.renderPolynomialsModeConfiguration();\n      }\n      case modes.trigonometric: {\n        return this.renderTrigonometricModeConfiguration();\n      }\n      case modes.interestingFacts: {\n        return this.renderInterestingFactsModeConfiguration();\n      }\n      default: {\n        return null;\n      }\n    }\n  }\n\n  render() {\n    console.log('line state: ', this.state);\n    return (\n      <div className=\"line-page\" key={`line-chart-${this.state.currentMode}`}>\n        <div className=\"row\">\n          <div className=\"col-sm-4\">\n            {this.renderOptionsDropdown()}\n            <div className=\"configuration-area\">{this.renderConfigurationsArea()}</div>\n          </div>\n          <div className=\"col-sm-8 chart-area\">\n            {this.state.currentMode === modes.stockSimulation ? (\n              <Stock\n                container={'line-stock'}\n                options={this.state.options}\n                update={this.state.rerenderChart}\n              />\n            ) : (\n              <Chart\n                container={'line-chart'}\n                options={this.state.options}\n                update={this.state.rerenderChart}\n              />\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","/Users/dkoval/dev/React-Highcharts/src/components/charts/other.js",["159","160","161","162","163","164","165","166","167","168"],"import React, { Component } from 'react';\nimport Highcharts from 'highcharts';\nimport TagsInput from 'react-tagsinput';\n\nimport Chart from './chart-abstract';\nimport SketchColorPicker from '../color-picker';\n\nimport {\n  heatmap,\n  tilemap,\n  polar,\n  boxplot,\n  gauge,\n  pyramid,\n  wordcloud,\n  sankey,\n  clock,\n} from '../../constants/other/default-options-other';\n\nimport {\n  modes,\n  initialState,\n  optionsHeatmap,\n  optionsTilemap,\n  optionsWordcloud,\n  optionsPolar,\n  optionsBoxplot,\n  optionsPyramid,\n  optionsGauge,\n  optionsSankey,\n} from '../../constants/other/modes-options-other';\n\nimport {\n  generateSeriesForHeatmap,\n  generateSeriesForTilemap,\n  generateSeriesForPolar,\n  generateInitialDataBoxplot,\n  generateRandomPointsBoxplot,\n  generateBoxplotSeries,\n  averageLineBoxplot,\n  countWords,\n  generateSeriesForWordCloud,\n  generateSeriesPyramid,\n  analyzeGaugeText,\n  generateDataForSankey,\n  generateSeriesForClock,\n} from '../../constants/other/data-helpers-other';\n\nimport { limitNumericalInput } from '../../constants/shared/helpers';\n\nexport default class Other extends Component {\n  constructor(props) {\n    super(props);\n    this.state = initialState;\n\n    this.dropdownClickHandler = this.dropdownClickHandler.bind(this);\n    this.initBoxplot = this.initBoxplot.bind(this);\n    this.onAddPointsBoxplot = this.onAddPointsBoxplot.bind(this);\n    this.onHeatmapCheckBoxChange = this.onHeatmapCheckBoxChange.bind(this);\n    this.onTilemapCheckBoxChange = this.onTilemapCheckBoxChange.bind(this);\n    this.onPolarCheckBoxChange = this.onPolarCheckBoxChange.bind(this);\n    this.onBoxplotSelectChange = this.onBoxplotSelectChange.bind(this);\n    this.onBoxplotInputChange = this.onBoxplotInputChange.bind(this);\n    this.onPyramidCheckBoxChange = this.onPyramidCheckBoxChange.bind(this);\n    this.onChangeColorHeatmap = this.onChangeColorHeatmap.bind(this);\n    this.onChangeColorTilemap = this.onChangeColorTilemap.bind(this);\n    this.onWordcloudInputChange = this.onWordcloudInputChange.bind(this);\n    this.onWordcloudTagsChange = this.onWordcloudTagsChange.bind(this);\n    this.onGaugeInputChange = this.onGaugeInputChange.bind(this);\n    this.onSankeyInputChange = this.onSankeyInputChange.bind(this);\n    this.updateHeatmapConfiguration = this.updateHeatmapConfiguration.bind(this);\n    this.updateTilemapConfiguration = this.updateTilemapConfiguration.bind(this);\n    this.updatePolarConfiguration = this.updatePolarConfiguration.bind(this);\n    this.updatePyramidConfiguration = this.updatePyramidConfiguration.bind(this);\n    this.updateWordcloudConfiguration = this.updateWordcloudConfiguration.bind(this);\n    this.updateGaugeConfiguration = this.updateGaugeConfiguration.bind(this);\n    this.refreshGaugeCongifuration = this.refreshGaugeCongifuration.bind(this);\n    this.updateSankeyConfiguration = this.updateSankeyConfiguration.bind(this);\n  }\n\n  componentDidMount() {\n    this.initHeatmap();\n  }\n\n  initHeatmap() {\n    const options = generateSeriesForHeatmap(heatmap, false);\n\n    this.setState({ options }, () => {\n      this.updateHeatmapConfiguration();\n    });\n  }\n\n  initTilemap() {\n    const options = tilemap;\n    options.series = generateSeriesForTilemap();\n\n    this.setState({ options }, () => {\n      this.updateTilemapConfiguration();\n    });\n  }\n\n  initPolar() {\n    const options = polar;\n    options.series = generateSeriesForPolar();\n\n    this.setState({ options }, () => {\n      this.updatePolarConfiguration();\n    });\n  }\n\n  initBoxplot() {\n    const options = boxplot;\n    const { configurations } = this.state;\n    this.boxplotData = generateInitialDataBoxplot(configurations.boxplot);\n\n    this.setState({ options }, () => {\n      this.updateBoxplotConfiguration();\n    });\n  }\n\n  initGauge() {\n    const options = gauge;\n\n    this.setState({ options }, () => {\n      this.refreshGaugeCongifuration();\n    });\n  }\n\n  initPyramid() {\n    const options = pyramid;\n    options.series[0].data = generateSeriesPyramid();\n\n    this.setState({ options }, () => {\n      this.updatePyramidConfiguration();\n    });\n  }\n\n  initWordcloud() {\n    const options = wordcloud;\n\n    this.setState({ options }, () => {\n      this.updateWordcloudConfiguration();\n    });\n  }\n\n  initSankey() {\n    const options = sankey;\n\n    this.setState({ options }, () => {\n      this.updateSankeyConfiguration();\n    });\n  }\n\n  initClock() {\n    const options = clock;\n\n    this.setState({ options }, () => {\n      this.updateClockConfiguration();\n    });\n  }\n\n  updateHeatmapConfiguration() {\n    const { heatmap } = this.state.configurations;\n    const { options } = this.state;\n    const usualTooltip = {\n      formatter: function () {\n        return `The intersection of <b>${this.series.xAxis.categories[this.point.x]}</b>\n                  and <b>${this.series.yAxis.categories[this.point.y]}</b>\n                  has the value <b>${this.point.value}</b>`;\n      },\n    };\n    const diagonalizedTooltip = {\n      formatter: function () {\n        if (this.point.x === this.point.y) {\n          return false;\n        }\n        return `The correlation between <b>${this.series.xAxis.categories[this.point.x]}</b>\n                  and <b>${this.series.yAxis.categories[this.point.y]}</b>\n                  has the next coefficient <b>${this.point.value}</b>`;\n      },\n    };\n\n    options.tooltip = heatmap.diagonalized ? diagonalizedTooltip : usualTooltip;\n\n    if (\n      (heatmap.diagonalized && !heatmap.alreadyDiagonalized) ||\n      (!heatmap.diagonalized && heatmap.alreadyDiagonalized)\n    ) {\n      options.series = generateSeriesForHeatmap(options, heatmap.diagonalized).series;\n    }\n    options.title.text = heatmap.title ? 'Randomly generated data' : null;\n    options.subtitle.text = heatmap.title ? 'This data is not real' : null;\n    options.legend.enabled = heatmap.legend;\n    options.tooltip.enabled = heatmap.tooltip;\n    options.series[0].dataLabels.enabled = heatmap.dataLabels;\n    options.plotOptions.series.animation = heatmap.animation;\n    options.xAxis.labels.enabled = heatmap.axisTitles;\n    options.yAxis.labels.enabled = heatmap.axisTitles;\n    options.colorAxis.minColor = heatmap.minColor;\n    options.colorAxis.maxColor = heatmap.maxColor;\n    options.series[0].borderColor = heatmap.borderColor;\n    heatmap.alreadyDiagonalized = heatmap.diagonalized;\n    this.setState({ rerenderChart: true }, () => {\n      this.setState({ rerenderChart: false });\n    });\n  }\n\n  updateTilemapConfiguration() {\n    const { tilemap } = this.state.configurations;\n    const { options } = this.state;\n\n    options.title.text = tilemap.title ? 'Randomly generated data' : null;\n    options.subtitle.text = tilemap.title ? 'This data is not real' : null;\n    options.legend.enabled = tilemap.legend;\n    options.tooltip.enabled = tilemap.tooltip;\n    options.plotOptions.series.dataLabels.enabled = tilemap.dataLabels;\n    options.plotOptions.series.animation = tilemap.animation;\n    options.colorAxis.dataClasses[0].color = tilemap.minColor;\n    options.colorAxis.dataClasses[1].color = tilemap.lowColor;\n    options.colorAxis.dataClasses[2].color = tilemap.highColor;\n    options.colorAxis.dataClasses[3].color = tilemap.maxColor;\n\n    this.setState({ rerenderChart: true }, () => {\n      this.setState({ rerenderChart: false });\n    });\n  }\n\n  updatePolarConfiguration() {\n    const { polar } = this.state.configurations;\n    const { options } = this.state;\n    const circleLableFormatter = {\n      formatter: function () {\n        return this.value + '°';\n      },\n    };\n\n    options.title.text = polar.title ? 'Randomly generated data' : null;\n    options.subtitle.text = polar.title ? 'This data is not real' : null;\n    options.legend.enabled = polar.legend;\n    options.tooltip.enabled = polar.tooltip;\n    options.plotOptions.series.dataLabels.enabled = polar.dataLabels;\n    options.plotOptions.series.animation = polar.animation;\n    options.plotOptions.series.pointStart = polar.spiderMode ? undefined : 0;\n    options.plotOptions.series.pointInterval = polar.spiderMode\n      ? undefined\n      : 360 / options.series[0].data.length;\n    options.xAxis.tickInterval = polar.spiderMode ? undefined : 360 / options.series[0].data.length;\n    options.xAxis.categories = polar.spiderMode\n      ? options.series[0].data.map((item, i) => `Random Category ${i + 1}`)\n      : undefined;\n    options.xAxis.min = polar.spiderMode ? undefined : 0;\n    options.xAxis.max = polar.spiderMode ? undefined : 360;\n    options.xAxis.labels = polar.spiderMode ? {} : circleLableFormatter;\n    options.yAxis.gridLineInterpolation = polar.spiderMode ? 'polygone' : 'circle';\n    options.series.forEach(serie => {\n      if (polar.chartType === 'Line') {\n        serie.type = 'line';\n      } else if (polar.chartType === 'Area') {\n        serie.type = 'area';\n      } else {\n        serie.type = 'column';\n      }\n    });\n\n    this.setState({ rerenderChart: true }, () => {\n      this.setState({ rerenderChart: false });\n    });\n  }\n\n  updateBoxplotConfiguration() {\n    const { options, configurations } = this.state;\n\n    options.series = generateBoxplotSeries(this.boxplotData, configurations.boxplot);\n    options.yAxis.plotLines = configurations.boxplot.showAverage\n      ? averageLineBoxplot(this.boxplotData)\n      : [];\n\n    this.setState({ rerenderChart: true }, () => {\n      this.setState({ rerenderChart: false });\n    });\n  }\n\n  onAddPointsBoxplot(event) {\n    const { boxplot } = this.state.configurations;\n    const { min, max, target } = boxplot;\n    const { options } = this.state;\n    const amount = Number(event.target.dataset.amount);\n    const newPoints = generateRandomPointsBoxplot(min, max, amount);\n    this.boxplotData[target] = this.boxplotData[target].concat(newPoints);\n    const message = `Last added values to the boxplot #${target}: ${newPoints.reduce(\n      (result, element) => `${result}, ${element}`\n    )}`;\n\n    options.series = generateBoxplotSeries(this.boxplotData, boxplot);\n    options.yAxis.plotLines = boxplot.showAverage ? averageLineBoxplot(this.boxplotData) : [];\n    options.subtitle.text = message;\n\n    this.setState({ options, rerenderChart: true }, () => {\n      this.setState({ rerenderChart: false });\n    });\n  }\n\n  updateGaugeConfiguration() {\n    const { options, configurations } = this.state;\n\n    const { chars, digits, symbols } = analyzeGaugeText(configurations.gauge);\n\n    options.series[0].data[0].y = chars > 100 ? 100 : chars;\n    options.series[1].data[0].y = digits > 100 ? 100 : digits;\n    options.series[2].data[0].y = symbols > 100 ? 100 : symbols;\n\n    this.setState({ rerenderChart: true }, () => {\n      this.setState({ rerenderChart: false });\n    });\n  }\n\n  refreshGaugeCongifuration() {\n    const { options, configurations } = this.state;\n\n    configurations.gauge.text = 'Enter here your text to see its char analysis on the chart...';\n    configurations.gauge.chars = 500;\n    configurations.gauge.digits = 50;\n    configurations.gauge.symbols = 100;\n\n    const { chars, digits, symbols } = analyzeGaugeText(configurations.gauge);\n\n    options.series[0].data[0].y = chars > 100 ? 100 : chars;\n    options.series[1].data[0].y = digits > 100 ? 100 : digits;\n    options.series[2].data[0].y = symbols > 100 ? 100 : symbols;\n\n    this.setState({ rerenderChart: true, configurations }, () => {\n      this.setState({ rerenderChart: false });\n    });\n  }\n\n  updatePyramidConfiguration() {\n    const { pyramid } = this.state.configurations;\n    const { options } = this.state;\n\n    options.title.text = pyramid.title ? 'Randomly generated data' : null;\n    options.subtitle.text = pyramid.title ? 'This data is not real' : null;\n    options.legend.enabled = pyramid.legend;\n    options.tooltip.enabled = pyramid.tooltip;\n    options.plotOptions.series.dataLabels.enabled = pyramid.dataLabels;\n    options.plotOptions.series.animation = pyramid.animation;\n    options.plotOptions.pyramid.allowPointSelect = pyramid.allowPointSelect;\n\n    this.setState({ rerenderChart: true }, () => {\n      this.setState({ rerenderChart: false });\n    });\n  }\n\n  updateWordcloudConfiguration() {\n    const { options, configurations } = this.state;\n    const { text, limit, filter } = configurations.wordcloud;\n\n    const rawData = countWords(text, filter);\n    options.series = generateSeriesForWordCloud(rawData, limit);\n    options.title.text = 'Word Cloud Chart';\n\n    this.setState({ options, rerenderChart: true }, () => {\n      this.setState({ rerenderChart: false });\n    });\n  }\n\n  updateSankeyConfiguration() {\n    const { sankey } = this.state.configurations;\n    const { options } = this.state;\n    options.series[0].data = generateDataForSankey(sankey);\n\n    options.plotOptions.sankey.linkOpacity = sankey.linkOpacity;\n    options.plotOptions.sankey.curveFactor = sankey.curveFactor;\n\n    this.setState({ rerenderChart: true }, () => {\n      this.setState({ rerenderChart: false });\n    });\n  }\n\n  updateClockConfiguration() {\n    const { clock } = this.state.configurations;\n    const { options } = this.state;\n    options.series = generateSeriesForClock(clock);\n    options.function = clock.function;\n\n    this.setState({ rerenderChart: true }, () => {\n      this.setState({ rerenderChart: false });\n    });\n  }\n\n  dropdownClickHandler(input) {\n    const mode = input.target.innerHTML;\n    const { configurations } = this.state;\n    switch (mode) {\n      case modes.heatmap: {\n        this.initHeatmap();\n        break;\n      }\n      case modes.tilemap: {\n        this.initTilemap();\n        break;\n      }\n      case modes.polar: {\n        this.initPolar();\n        break;\n      }\n      case modes.boxplot: {\n        this.initBoxplot();\n        break;\n      }\n      case modes.gauge: {\n        this.initGauge();\n        break;\n      }\n      case modes.pyramid: {\n        this.initPyramid();\n        break;\n      }\n      case modes.wordcloud: {\n        this.initWordcloud();\n        break;\n      }\n      case modes.sankey: {\n        this.initSankey();\n        break;\n      }\n      case modes.clock: {\n        this.initClock();\n        break;\n      }\n      default: {\n        console.log('This mode is not implemented yet');\n      }\n    }\n    this.setState({ currentMode: mode, configurations });\n  }\n\n  onHeatmapCheckBoxChange(event) {\n    const { configurations } = this.state;\n    if (configurations.heatmap[event.target.value]) {\n      configurations.heatmap[event.target.value] = false;\n    } else {\n      configurations.heatmap[event.target.value] = true;\n    }\n    this.setState({ configurations });\n  }\n\n  onTilemapCheckBoxChange(event) {\n    const { configurations } = this.state;\n    if (configurations.tilemap[event.target.value]) {\n      configurations.tilemap[event.target.value] = false;\n    } else {\n      configurations.tilemap[event.target.value] = true;\n    }\n    this.setState({ configurations });\n  }\n\n  onChangeColorHeatmap(key, color) {\n    const { configurations } = this.state;\n    if (typeof key === 'string' && configurations.heatmap[key]) {\n      configurations.heatmap[key] = color.hex;\n    }\n    this.setState({ configurations });\n  }\n\n  onChangeColorTilemap(key, color) {\n    const { configurations } = this.state;\n    if (typeof key === 'string' && configurations.tilemap[key]) {\n      configurations.tilemap[key] = color.hex;\n    }\n    this.setState({ configurations });\n  }\n\n  onPolarCheckBoxChange(event) {\n    const { configurations } = this.state;\n    if (event.target.name === optionsPolar.chartType) {\n      configurations.polar[event.target.name] = event.target.value;\n    } else {\n      if (configurations.polar[event.target.value]) {\n        configurations.polar[event.target.value] = false;\n      } else {\n        configurations.polar[event.target.value] = true;\n      }\n    }\n    this.setState({ configurations });\n  }\n\n  onBoxplotSelectChange(event) {\n    const { configurations } = this.state;\n    if (event.target.name === optionsBoxplot.target) {\n      configurations.boxplot[event.target.name] = Number(event.target.value);\n      this.setState({ configurations });\n    } else {\n      if (configurations.boxplot[event.target.value]) {\n        configurations.boxplot[event.target.value] = false;\n      } else {\n        configurations.boxplot[event.target.value] = true;\n      }\n      this.setState({ configurations, rerenderChart: true }, () => {\n        this.updateBoxplotConfiguration();\n      });\n    }\n  }\n\n  onBoxplotInputChange(event) {\n    const { configurations } = this.state;\n    if (event.target.name === optionsBoxplot.min) {\n      limitNumericalInput(\n        configurations.boxplot,\n        event.target.name,\n        event.target.value,\n        -1000000,\n        configurations.boxplot.max,\n        false\n      );\n    } else if (event.target.name === optionsBoxplot.max) {\n      limitNumericalInput(\n        configurations.boxplot,\n        event.target.name,\n        event.target.value,\n        configurations.boxplot.min,\n        1000000,\n        false\n      );\n    } else {\n      configurations.boxplot[event.target.name] = event.target.value;\n    }\n\n    this.setState({ configurations });\n  }\n\n  onPyramidCheckBoxChange(event) {\n    const { configurations } = this.state;\n    if (configurations.pyramid[event.target.value]) {\n      configurations.pyramid[event.target.value] = false;\n    } else {\n      configurations.pyramid[event.target.value] = true;\n    }\n\n    this.setState({ configurations });\n  }\n\n  onWordcloudInputChange(event) {\n    const { configurations } = this.state;\n    const newValue =\n      event.target.value === ''\n        ? 'Enter here your text to plot its words set on the chart...'\n        : event.target.value;\n    if (event.target.name === 'limit') {\n      limitNumericalInput(configurations.wordcloud, event.target.name, newValue, 1, 1000, true);\n    } else {\n      configurations.wordcloud[event.target.name] = newValue;\n    }\n\n    this.setState({ configurations });\n  }\n\n  onGaugeInputChange(event) {\n    const { configurations } = this.state;\n    const newValue =\n      event.target.value === ''\n        ? 'Enter here your text to see its char analysis on the chart...'\n        : event.target.value;\n    if (event.target.name !== 'text') {\n      limitNumericalInput(configurations.gauge, event.target.name, newValue, 1, 10000, true);\n    } else {\n      configurations.gauge[event.target.name] = newValue;\n    }\n\n    this.setState({ configurations }, () => {\n      this.updateGaugeConfiguration();\n    });\n  }\n\n  onWordcloudTagsChange(newTags) {\n    const { configurations } = this.state;\n    const lastTag = newTags[newTags.length - 1];\n    const alreadyExist = configurations.wordcloud.filter.includes(lastTag);\n    const deleted = configurations.wordcloud.filter.length > newTags.length;\n    if (!alreadyExist || deleted) {\n      configurations.wordcloud.filter = newTags;\n    }\n\n    this.setState({ configurations });\n  }\n\n  onSankeyInputChange(event) {\n    const { configurations } = this.state;\n    configurations.sankey[event.target.name] = event.target.value;\n\n    this.setState({ configurations });\n  }\n\n  renderOptionsDropdown() {\n    return (\n      <div className=\"dropdown\">\n        <button className=\"btn btn-primary dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">\n          Configurations\n          <span className=\"caret\"></span>\n        </button>\n        <ul className=\"dropdown-menu\">\n          <li className=\"dropdown-header\">Other Charts</li>\n          <li>\n            <a onClick={this.dropdownClickHandler}>{modes.heatmap}</a>\n          </li>\n          <li>\n            <a onClick={this.dropdownClickHandler}>{modes.tilemap}</a>\n          </li>\n          <li>\n            <a onClick={this.dropdownClickHandler}>{modes.polar}</a>\n          </li>\n          <li>\n            <a onClick={this.dropdownClickHandler}>{modes.boxplot}</a>\n          </li>\n          <li>\n            <a onClick={this.dropdownClickHandler}>{modes.gauge}</a>\n          </li>\n          <li>\n            <a onClick={this.dropdownClickHandler}>{modes.pyramid}</a>\n          </li>\n          <li>\n            <a onClick={this.dropdownClickHandler}>{modes.wordcloud}</a>\n          </li>\n          <li>\n            <a onClick={this.dropdownClickHandler}>{modes.sankey}</a>\n          </li>\n          <li>\n            <a onClick={this.dropdownClickHandler}>{modes.clock}</a>\n          </li>\n        </ul>\n      </div>\n    );\n  }\n\n  renderHeatmapConfiguration() {\n    const { heatmap } = this.state.configurations;\n    return (\n      <div className=\"other-heatmap-container\">\n        <div className=\"checkboxes other-heatmap\">\n          <div className=\"checkbox\">\n            <label>\n              <input\n                type=\"checkbox\"\n                value={optionsHeatmap.title}\n                checked={heatmap.title}\n                onChange={this.onHeatmapCheckBoxChange}\n              />\n              Show Chart Title\n            </label>\n          </div>\n          <div className=\"checkbox\">\n            <label>\n              <input\n                type=\"checkbox\"\n                value={optionsHeatmap.axisTitles}\n                checked={heatmap.axisTitles}\n                onChange={this.onHeatmapCheckBoxChange}\n              />\n              Show Axis Titles\n            </label>\n          </div>\n          <div className=\"checkbox\">\n            <label>\n              <input\n                type=\"checkbox\"\n                value={optionsHeatmap.dataLabels}\n                checked={heatmap.dataLabels}\n                onChange={this.onHeatmapCheckBoxChange}\n              />\n              Show Data Labels\n            </label>\n          </div>\n          <div className=\"checkbox\">\n            <label>\n              <input\n                type=\"checkbox\"\n                value={optionsHeatmap.legend}\n                checked={heatmap.legend}\n                onChange={this.onHeatmapCheckBoxChange}\n              />\n              Show Legend\n            </label>\n          </div>\n          <div className=\"checkbox\">\n            <label>\n              <input\n                type=\"checkbox\"\n                value={optionsHeatmap.tooltip}\n                checked={heatmap.tooltip}\n                onChange={this.onHeatmapCheckBoxChange}\n              />\n              Enable Tooltip\n            </label>\n          </div>\n          <div className=\"checkbox\">\n            <label>\n              <input\n                type=\"checkbox\"\n                value={optionsHeatmap.animation}\n                checked={heatmap.animation}\n                onChange={this.onHeatmapCheckBoxChange}\n              />\n              Enable Animation\n            </label>\n          </div>\n          <div className=\"checkbox\">\n            <label>\n              <input\n                type=\"checkbox\"\n                value={optionsHeatmap.diagonalized}\n                checked={heatmap.diagonalized}\n                onChange={this.onHeatmapCheckBoxChange}\n              />\n              Correlation Mode\n            </label>\n          </div>\n        </div>\n\n        <div className=\"color-pickers\">\n          <div className=\"color-picker-item\">\n            <label>\n              Min Color\n              <SketchColorPicker\n                color={heatmap.minColor}\n                onChangeColor={this.onChangeColorHeatmap}\n                identificator={optionsHeatmap.minColor}\n                presetColors={Highcharts.getOptions().colors}\n              />\n            </label>\n          </div>\n          <div className=\"color-picker-item\">\n            <label>\n              Max Color\n              <SketchColorPicker\n                color={heatmap.maxColor}\n                onChangeColor={this.onChangeColorHeatmap}\n                identificator={optionsHeatmap.maxColor}\n                presetColors={Highcharts.getOptions().colors}\n              />\n            </label>\n          </div>\n          <div className=\"color-picker-item\">\n            <label>\n              Border Color\n              <SketchColorPicker\n                color={heatmap.borderColor}\n                onChangeColor={this.onChangeColorHeatmap}\n                identificator={optionsHeatmap.borderColor}\n                presetColors={Highcharts.getOptions().colors}\n              />\n            </label>\n          </div>\n        </div>\n\n        <button\n          type=\"button\"\n          className=\"btn btn-success apply-button position-dynamic\"\n          onClick={this.updateHeatmapConfiguration}\n        >\n          Apply\n        </button>\n      </div>\n    );\n  }\n\n  renderTilemapConfiguration() {\n    const { tilemap } = this.state.configurations;\n    return (\n      <div className=\"other-tilemap-container\">\n        <div className=\"checkboxes other-tilemap\">\n          <div className=\"checkbox\">\n            <label>\n              <input\n                type=\"checkbox\"\n                value={optionsTilemap.title}\n                checked={tilemap.title}\n                onChange={this.onTilemapCheckBoxChange}\n              />\n              Show Chart Title\n            </label>\n          </div>\n          <div className=\"checkbox\">\n            <label>\n              <input\n                type=\"checkbox\"\n                value={optionsTilemap.dataLabels}\n                checked={tilemap.dataLabels}\n                onChange={this.onTilemapCheckBoxChange}\n              />\n              Show Data Labels\n            </label>\n          </div>\n          <div className=\"checkbox\">\n            <label>\n              <input\n                type=\"checkbox\"\n                value={optionsTilemap.legend}\n                checked={tilemap.legend}\n                onChange={this.onTilemapCheckBoxChange}\n              />\n              Show Legend\n            </label>\n          </div>\n          <div className=\"checkbox\">\n            <label>\n              <input\n                type=\"checkbox\"\n                value={optionsTilemap.tooltip}\n                checked={tilemap.tooltip}\n                onChange={this.onTilemapCheckBoxChange}\n              />\n              Enable Tooltip\n            </label>\n          </div>\n          <div className=\"checkbox\">\n            <label>\n              <input\n                type=\"checkbox\"\n                value={optionsTilemap.animation}\n                checked={tilemap.animation}\n                onChange={this.onTilemapCheckBoxChange}\n              />\n              Enable Animation\n            </label>\n          </div>\n        </div>\n\n        <div className=\"color-pickers\">\n          <div className=\"color-picker-item-tilemap\">\n            <label>\n              Min Color\n              <SketchColorPicker\n                color={tilemap.minColor}\n                onChangeColor={this.onChangeColorTilemap}\n                identificator={optionsTilemap.minColor}\n                presetColors={Highcharts.getOptions().colors}\n              />\n            </label>\n          </div>\n          <div className=\"color-picker-item-tilemap\">\n            <label>\n              Low Color\n              <SketchColorPicker\n                color={tilemap.lowColor}\n                onChangeColor={this.onChangeColorTilemap}\n                identificator={optionsTilemap.lowColor}\n                presetColors={Highcharts.getOptions().colors}\n              />\n            </label>\n          </div>\n          <div className=\"color-picker-item-tilemap\">\n            <label>\n              High Color\n              <SketchColorPicker\n                color={tilemap.highColor}\n                onChangeColor={this.onChangeColorTilemap}\n                identificator={optionsTilemap.highColor}\n                presetColors={Highcharts.getOptions().colors}\n              />\n            </label>\n          </div>\n          <div className=\"color-picker-item-tilemap\">\n            <label>\n              Max Color\n              <SketchColorPicker\n                color={tilemap.maxColor}\n                onChangeColor={this.onChangeColorTilemap}\n                identificator={optionsTilemap.maxColor}\n                presetColors={Highcharts.getOptions().colors}\n              />\n            </label>\n          </div>\n        </div>\n\n        <button\n          type=\"button\"\n          className=\"btn btn-success apply-button position-dynamic\"\n          onClick={this.updateTilemapConfiguration}\n        >\n          Apply\n        </button>\n      </div>\n    );\n  }\n\n  renderPolarConfiguration() {\n    const { polar } = this.state.configurations;\n    return (\n      <div className=\"other-polar-container\">\n        <div className=\"form-group config-option polar-type-selector\">\n          <label>Type of the Chart:</label>\n          <select\n            className=\"form-control\"\n            onChange={this.onPolarCheckBoxChange}\n            name={optionsPolar.chartType}\n          >\n            <option>Line</option>\n            <option>Area</option>\n            <option>Column</option>\n          </select>\n        </div>\n        <div className=\"checkboxes other-polar\">\n          <div className=\"checkbox\">\n            <label>\n              <input\n                type=\"checkbox\"\n                value={optionsPolar.title}\n                checked={polar.title}\n                onChange={this.onPolarCheckBoxChange}\n              />\n              Show Chart Title\n            </label>\n          </div>\n          <div className=\"checkbox\">\n            <label>\n              <input\n                type=\"checkbox\"\n                value={optionsPolar.dataLabels}\n                checked={polar.dataLabels}\n                onChange={this.onPolarCheckBoxChange}\n              />\n              Show Data Labels\n            </label>\n          </div>\n          <div className=\"checkbox\">\n            <label>\n              <input\n                type=\"checkbox\"\n                value={optionsPolar.legend}\n                checked={polar.legend}\n                onChange={this.onPolarCheckBoxChange}\n              />\n              Show Legend\n            </label>\n          </div>\n          <div className=\"checkbox\">\n            <label>\n              <input\n                type=\"checkbox\"\n                value={optionsPolar.tooltip}\n                checked={polar.tooltip}\n                onChange={this.onPolarCheckBoxChange}\n              />\n              Enable Tooltip\n            </label>\n          </div>\n          <div className=\"checkbox\">\n            <label>\n              <input\n                type=\"checkbox\"\n                value={optionsPolar.animation}\n                checked={polar.animation}\n                onChange={this.onPolarCheckBoxChange}\n              />\n              Enable Animation\n            </label>\n          </div>\n          <div className=\"checkbox\">\n            <label>\n              <input\n                type=\"checkbox\"\n                value={optionsPolar.spiderMode}\n                checked={polar.spiderMode}\n                onChange={this.onPolarCheckBoxChange}\n              />\n              Use Spider Net Mode\n            </label>\n          </div>\n        </div>\n\n        <button\n          type=\"button\"\n          className=\"btn btn-success apply-button\"\n          onClick={this.updatePolarConfiguration}\n        >\n          Apply\n        </button>\n      </div>\n    );\n  }\n\n  renderBoxPlotConfiguration() {\n    const { boxplot } = this.state.configurations;\n    return (\n      <div className=\"other-boxplot\">\n        <div className=\"form-group config-option target-group-selector\">\n          <label>Target:</label>\n          <select\n            className=\"form-control\"\n            onChange={this.onBoxplotSelectChange}\n            name={optionsBoxplot.target}\n          >\n            <option>1</option>\n            <option>2</option>\n            <option>3</option>\n          </select>\n        </div>\n\n        <div className=\"row\">\n          <div className=\"col-md-6 special-small\">\n            <div className=\"form-group config-option\">\n              <label>Min</label>\n              <input\n                type=\"number\"\n                data-type={optionsBoxplot.min}\n                className=\"form-control\"\n                name={optionsBoxplot.min}\n                value={boxplot.min}\n                onChange={this.onBoxplotInputChange}\n              />\n            </div>\n          </div>\n          <div className=\"col-md-6 special-small\">\n            <div className=\"form-group config-option\">\n              <label>Max</label>\n              <input\n                type=\"number\"\n                data-type={optionsBoxplot.max}\n                className=\"form-control\"\n                name={optionsBoxplot.max}\n                value={boxplot.max}\n                onChange={this.onBoxplotInputChange}\n              />\n            </div>\n          </div>\n        </div>\n\n        <div className=\"row basic-config shot-container\">\n          <div className=\"col-md-6 special-small\">\n            <button\n              type=\"button\"\n              className=\"btn btn-primary shot\"\n              data-amount={1}\n              onClick={this.onAddPointsBoxplot}\n            >\n              1 shot\n            </button>\n          </div>\n          <div className=\"col-md-6 special-small\">\n            <button\n              type=\"button\"\n              className=\"btn btn-primary shot\"\n              data-amount={10}\n              onClick={this.onAddPointsBoxplot}\n            >\n              10 shots\n            </button>\n          </div>\n        </div>\n\n        <div className=\"checkboxes other-heatmap\">\n          <div className=\"checkbox\">\n            <label>\n              <input\n                type=\"checkbox\"\n                value={optionsBoxplot.outliers}\n                checked={boxplot.outliers}\n                onChange={this.onBoxplotSelectChange}\n              />\n              Outliers\n            </label>\n          </div>\n\n          <div className=\"checkbox\">\n            <label>\n              <input\n                type=\"checkbox\"\n                value={optionsBoxplot.showAverage}\n                checked={boxplot.showAverage}\n                onChange={this.onBoxplotSelectChange}\n              />\n              Global average\n            </label>\n          </div>\n        </div>\n\n        <button\n          type=\"button\"\n          className=\"btn btn-success apply-button position-dynamic\"\n          onClick={this.initBoxplot}\n        >\n          Restart\n        </button>\n      </div>\n    );\n  }\n\n  renderWordcloudConfiguration() {\n    const { wordcloud } = this.state.configurations;\n    return (\n      <div className=\"other-wordcloud\">\n        <div className=\"form-group config-option\">\n          <label>Text for plotting</label>\n          <textarea\n            className=\"form-control input-textarea\"\n            name={optionsWordcloud.text}\n            value={wordcloud.text}\n            onChange={this.onWordcloudInputChange}\n          />\n        </div>\n\n        <div className=\"form-group config-option\">\n          <label>Filter next words</label>\n          <TagsInput value={wordcloud.filter} onChange={this.onWordcloudTagsChange} />\n        </div>\n\n        <div className=\"form-group config-option\">\n          <label>Number of words</label>\n          <input\n            type=\"number\"\n            className=\"form-control\"\n            name={optionsWordcloud.limit}\n            value={wordcloud.limit}\n            onChange={this.onWordcloudInputChange}\n          />\n        </div>\n\n        <button\n          type=\"button\"\n          className=\"btn btn-success apply-button position-dynamic\"\n          onClick={this.updateWordcloudConfiguration}\n        >\n          Apply\n        </button>\n      </div>\n    );\n  }\n\n  renderGaugeConfiguration() {\n    const { gauge } = this.state.configurations;\n    return (\n      <div className=\"other-gauge\">\n        <div className=\"form-group config-option\">\n          <label>Text for plotting</label>\n          <textarea\n            className=\"form-control input-textarea\"\n            name={optionsGauge.text}\n            value={gauge.text}\n            onChange={this.onGaugeInputChange}\n          />\n        </div>\n\n        <div className=\"form-group config-option\">\n          <label>Characters goal</label>\n          <input\n            type=\"number\"\n            className=\"form-control\"\n            name={optionsGauge.chars}\n            value={gauge.chars}\n            onChange={this.onGaugeInputChange}\n          />\n        </div>\n\n        <div className=\"form-group config-option\">\n          <label>Symbols goal</label>\n          <input\n            type=\"number\"\n            className=\"form-control\"\n            name={optionsGauge.symbols}\n            value={gauge.symbols}\n            onChange={this.onGaugeInputChange}\n          />\n        </div>\n\n        <div className=\"form-group config-option\">\n          <label>Digits goal</label>\n          <input\n            type=\"number\"\n            className=\"form-control\"\n            name={optionsGauge.digits}\n            value={gauge.digits}\n            onChange={this.onGaugeInputChange}\n          />\n        </div>\n\n        <button\n          type=\"button\"\n          className=\"btn btn-success apply-button position-dynamic\"\n          onClick={this.refreshGaugeCongifuration}\n        >\n          Refresh\n        </button>\n      </div>\n    );\n  }\n\n  renderPyramidConfiguration() {\n    const { pyramid } = this.state.configurations;\n    return (\n      <div className=\"other-pyramid-container\">\n        <div className=\"checkboxes other-pyramid\">\n          <div className=\"checkbox\">\n            <label>\n              <input\n                type=\"checkbox\"\n                value={optionsPyramid.title}\n                checked={pyramid.title}\n                onChange={this.onPyramidCheckBoxChange}\n              />\n              Show Chart Title\n            </label>\n          </div>\n          <div className=\"checkbox\">\n            <label>\n              <input\n                type=\"checkbox\"\n                value={optionsPyramid.dataLabels}\n                checked={pyramid.dataLabels}\n                onChange={this.onPyramidCheckBoxChange}\n              />\n              Show Data Labels\n            </label>\n          </div>\n          <div className=\"checkbox\">\n            <label>\n              <input\n                type=\"checkbox\"\n                value={optionsPyramid.legend}\n                checked={pyramid.legend}\n                onChange={this.onPyramidCheckBoxChange}\n              />\n              Show Legend\n            </label>\n          </div>\n          <div className=\"checkbox\">\n            <label>\n              <input\n                type=\"checkbox\"\n                value={optionsPyramid.tooltip}\n                checked={pyramid.tooltip}\n                onChange={this.onPyramidCheckBoxChange}\n              />\n              Enable Tooltip\n            </label>\n          </div>\n          <div className=\"checkbox\">\n            <label>\n              <input\n                type=\"checkbox\"\n                value={optionsPyramid.animation}\n                checked={pyramid.animation}\n                onChange={this.onPyramidCheckBoxChange}\n              />\n              Enable Animation\n            </label>\n          </div>\n          <div className=\"checkbox\">\n            <label>\n              <input\n                type=\"checkbox\"\n                value={optionsPyramid.allowPointSelect}\n                checked={pyramid.allowPointSelect}\n                onChange={this.onPyramidCheckBoxChange}\n              />\n              Allow Point Selection\n            </label>\n          </div>\n        </div>\n\n        <button\n          type=\"button\"\n          className=\"btn btn-success apply-button\"\n          onClick={this.updatePyramidConfiguration}\n        >\n          Apply\n        </button>\n      </div>\n    );\n  }\n\n  renderSankeyConfiguration() {\n    const { sankey } = this.state.configurations;\n    return (\n      <div className=\"other-sankey-container\">\n        <div className=\"checkboxes other-sankey\">\n          <div className=\"form-group config-option\">\n            <label>\n              Number of nodes: <span>{sankey.numberNodes}</span>\n            </label>\n            <input\n              type=\"range\"\n              className=\"slider\"\n              min=\"2\"\n              max=\"10\"\n              name={optionsSankey.numberNodes}\n              value={sankey.numberNodes}\n              onChange={this.onSankeyInputChange}\n            />\n          </div>\n          <div className=\"form-group config-option\">\n            <label>\n              Number of levels: <span>{sankey.numberLevels}</span>\n            </label>\n            <input\n              type=\"range\"\n              className=\"slider\"\n              min=\"2\"\n              max=\"5\"\n              name={optionsSankey.numberLevels}\n              value={sankey.numberLevels}\n              onChange={this.onSankeyInputChange}\n            />\n          </div>\n          <div className=\"form-group config-option\">\n            <label>\n              Density: <span>{sankey.density}%</span>\n            </label>\n            <input\n              type=\"range\"\n              className=\"slider\"\n              min=\"10\"\n              max=\"100\"\n              name={optionsSankey.density}\n              value={sankey.density}\n              onChange={this.onSankeyInputChange}\n            />\n          </div>\n          <div className=\"form-group config-option\">\n            <label>\n              Link opacity: <span>{sankey.linkOpacity}</span>\n            </label>\n            <input\n              type=\"range\"\n              className=\"slider\"\n              min=\"0\"\n              max=\"1\"\n              step=\"0.01\"\n              name={optionsSankey.linkOpacity}\n              value={sankey.linkOpacity}\n              onChange={this.onSankeyInputChange}\n            />\n          </div>\n          <div className=\"form-group config-option\">\n            <label>\n              Curve factor: <span>{sankey.curveFactor}</span>\n            </label>\n            <input\n              type=\"range\"\n              className=\"slider\"\n              min=\"0\"\n              max=\"1\"\n              step=\"0.01\"\n              name={optionsSankey.curveFactor}\n              value={sankey.curveFactor}\n              onChange={this.onSankeyInputChange}\n            />\n          </div>\n        </div>\n\n        <button\n          type=\"button\"\n          className=\"btn btn-success apply-button position-dynamic\"\n          onClick={this.updateSankeyConfiguration}\n        >\n          Apply\n        </button>\n      </div>\n    );\n  }\n\n  renderClockConfiguration() {\n    const { sankey } = this.state.configurations;\n    return (\n      <div className=\"other-clock-container\">\n        <div className=\"checkboxes other-clock\">CLOCK CONFIG</div>\n        <button\n          type=\"button\"\n          className=\"btn btn-success apply-button position-dynamic\"\n          onClick={this.updateSankeyConfiguration}\n        >\n          Apply\n        </button>\n      </div>\n    );\n  }\n\n  renderConfigurationsArea() {\n    const { currentMode } = this.state;\n    switch (currentMode) {\n      case modes.heatmap: {\n        return this.renderHeatmapConfiguration();\n      }\n      case modes.tilemap: {\n        return this.renderTilemapConfiguration();\n      }\n      case modes.polar: {\n        return this.renderPolarConfiguration();\n      }\n      case modes.boxplot: {\n        return this.renderBoxPlotConfiguration();\n      }\n      case modes.gauge: {\n        return this.renderGaugeConfiguration();\n      }\n      case modes.pyramid: {\n        return this.renderPyramidConfiguration();\n      }\n      case modes.wordcloud: {\n        return this.renderWordcloudConfiguration();\n      }\n      case modes.sankey: {\n        return this.renderSankeyConfiguration();\n      }\n      case modes.clock: {\n        return this.renderClockConfiguration();\n      }\n      default: {\n        return null;\n      }\n    }\n  }\n\n  render() {\n    console.log('other state: ', this.state);\n    return (\n      <div className=\"other-page\" key={`other-chart-${this.state.currentMode}`}>\n        <div className=\"row\">\n          <div className=\"col-sm-4\">\n            {this.renderOptionsDropdown()}\n            <div className=\"configuration-area\">{this.renderConfigurationsArea()}</div>\n          </div>\n\n          <div className=\"col-sm-8 chart-area\">\n            <Chart\n              container={'others-chart'}\n              options={this.state.options}\n              update={this.state.rerenderChart}\n              function={this.state.options.function}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","/Users/dkoval/dev/React-Highcharts/src/components/charts/pie.js",["169","170","171","172","173","174"],"import React, { Component } from 'react';\n\nimport Chart from './chart-abstract';\nimport Tooltip from '../tooltip';\n\nimport {\n  pureRandom,\n  configurableRandom,\n  clusteringSimulation,\n  primeFactorization,\n  irrationalAnalysis,\n  interestingFactsOne,\n} from '../../constants/pie/default-options-pie';\n\nimport {\n  modes,\n  tooltips,\n  initialState,\n  optionsPureRandom,\n  optionsConfigurableRandom,\n  optionsClusteringSimulation,\n  optionsPrimeFactorization,\n  optionsIrrationalAnalysis,\n  optionsInterestingFacts,\n} from '../../constants/pie/modes-options-pie';\n\nimport {\n  generateSeriesForPureRandom,\n  generateSeriesForConfigurableRandom,\n  generateSeriesForClusteringSimulation,\n  newPointToClusteringSimulation,\n  generateSeriesForPrimeFactorization,\n  generateSeriesForIrrationalAnalysis,\n} from '../../constants/pie/data-helpers-pie';\n\nimport { limitNumericalInput } from '../../constants/shared/helpers';\n\nexport default class Pie extends Component {\n  constructor(props) {\n    super(props);\n    this.state = initialState;\n\n    this.dropdownClickHandler = this.dropdownClickHandler.bind(this);\n    this.updatePureRandomConfiguration = this.updatePureRandomConfiguration.bind(this);\n    this.updateConfigurableRandomConfiguration = this.updateConfigurableRandomConfiguration.bind(\n      this\n    );\n    this.updateClusteringSimulationConfiguration = this.updateClusteringSimulationConfiguration.bind(\n      this\n    );\n    this.updatePrimeFactorizationConfiguration = this.updatePrimeFactorizationConfiguration.bind(\n      this\n    );\n    this.updateIrrationalAnalysisConfiguration = this.updateIrrationalAnalysisConfiguration.bind(\n      this\n    );\n    this.onPureRandomCheckBoxChange = this.onPureRandomCheckBoxChange.bind(this);\n    this.onConfigurableRandomInputChange = this.onConfigurableRandomInputChange.bind(this);\n    this.onClusteringSimulationInputChange = this.onClusteringSimulationInputChange.bind(this);\n    this.onPrimeFactorizationInputChange = this.onPrimeFactorizationInputChange.bind(this);\n    this.onIrrationalAnalysisInputChange = this.onIrrationalAnalysisInputChange.bind(this);\n    this.onInterestingFactsRadioChange = this.onInterestingFactsRadioChange.bind(this);\n  }\n\n  componentDidMount() {\n    this.initPureRandomeMode();\n  }\n\n  initPureRandomeMode() {\n    const options = pureRandom;\n\n    options.series = generateSeriesForPureRandom();\n\n    this.setState({ options }, () => {\n      this.updatePureRandomConfiguration();\n    });\n  }\n\n  initConfigurableRandomeMode() {\n    const options = configurableRandom;\n\n    this.setState({ options }, () => {\n      this.updateConfigurableRandomConfiguration();\n    });\n  }\n\n  initClusteringSimulationMode() {\n    const options = clusteringSimulation;\n\n    this.setState({ options }, () => {\n      this.updateClusteringSimulationConfiguration();\n    });\n  }\n\n  initPrimeFactorizationMode() {\n    const options = primeFactorization;\n\n    this.setState({ options }, () => {\n      this.updatePrimeFactorizationConfiguration();\n    });\n  }\n\n  initIrrationalAnalysisMode() {\n    const options = irrationalAnalysis;\n\n    this.setState({ options }, () => {\n      this.updateIrrationalAnalysisConfiguration();\n    });\n  }\n\n  initInterestingFactsMode() {\n    const options = interestingFactsOne;\n\n    this.setState({ options, rerenderChart: true }, () => {\n      this.setState({ rerenderChart: false });\n    });\n  }\n\n  updatePureRandomConfiguration() {\n    const { pureRandom } = this.state.configurations;\n    const { options } = this.state;\n\n    options.title.text = pureRandom.title ? 'Randomly generated data' : null;\n    options.subtitle.text = pureRandom.title ? 'Randomly generated data' : null;\n    options.legend.enabled = pureRandom.legend;\n    options.plotOptions.pie.dataLabels.enabled = pureRandom.dataLabels;\n    options.tooltip.enabled = pureRandom.tooltip;\n    options.plotOptions.series.animation = pureRandom.animation;\n    options.chart.options3d.enabled = pureRandom.threeDimensions;\n    options.plotOptions.pie.innerSize = pureRandom.donut ? '30%' : '0';\n\n    this.setState({ options, rerenderChart: true }, () => {\n      this.setState({ rerenderChart: false });\n    });\n  }\n\n  updateConfigurableRandomConfiguration() {\n    const { configurableRandom } = this.state.configurations;\n    const { options } = this.state;\n\n    const series = generateSeriesForConfigurableRandom(configurableRandom);\n\n    options.series = series;\n\n    this.setState({ options, rerenderChart: true }, () => {\n      this.setState({ rerenderChart: false });\n    });\n  }\n\n  updateClusteringSimulationConfiguration(event) {\n    const { configurations, options } = this.state;\n    const { isRunning, maxNumber, clusterNumber } = configurations.clusteringSimulation;\n\n    if (event) {\n      if (isRunning) {\n        configurations.clusteringSimulation.isRunning = false;\n        this.setState({ options, configurations, rerenderChart: true }, () => {\n          this.setState({ rerenderChart: false });\n        });\n      } else {\n        options.series = generateSeriesForClusteringSimulation(maxNumber, clusterNumber);\n        configurations.clusteringSimulation.isRunning = true;\n        this.setState({ configurations }, () => {\n          this.addPointsToClusteringSimulation();\n        });\n      }\n    } else {\n      this.setState({ options, rerenderChart: true }, () => {\n        this.setState({ rerenderChart: false });\n      });\n    }\n  }\n\n  updatePrimeFactorizationConfiguration() {\n    const { primeFactorization } = this.state.configurations;\n    const { options: oldOptions } = this.state;\n\n    const options = generateSeriesForPrimeFactorization(oldOptions, primeFactorization);\n\n    this.setState({ options, rerenderChart: true }, () => {\n      this.setState({ rerenderChart: false });\n    });\n  }\n\n  updateIrrationalAnalysisConfiguration() {\n    const { irrationalAnalysis } = this.state.configurations;\n    const { options: oldOptions } = this.state;\n\n    const options = generateSeriesForIrrationalAnalysis(oldOptions, irrationalAnalysis);\n\n    this.setState({ options, rerenderChart: true }, () => {\n      this.setState({ rerenderChart: false });\n    });\n  }\n\n  addPointsToClusteringSimulation() {\n    const { configurations, options: oldOptions } = this.state;\n    const { isRunning, maxNumber, clusterNumber, frequency } = configurations.clusteringSimulation;\n    if (isRunning) {\n      const options = newPointToClusteringSimulation(oldOptions, maxNumber, clusterNumber);\n      setTimeout(() => this.addPointsToClusteringSimulation(), frequency * 1000);\n      this.setState({ options, rerenderChart: true }, () => {\n        this.setState({ rerenderChart: false });\n      });\n    }\n  }\n\n  dropdownClickHandler(mode) {\n    const { configurations } = this.state;\n    switch (mode) {\n      case modes.pureRandom: {\n        this.initPureRandomeMode();\n        break;\n      }\n      case modes.configurableRandom: {\n        this.initConfigurableRandomeMode();\n        break;\n      }\n      case modes.clusteringSimulation: {\n        this.initClusteringSimulationMode();\n        break;\n      }\n      case modes.primeFactorization: {\n        this.initPrimeFactorizationMode();\n        break;\n      }\n      case modes.irrationalAnalysis: {\n        this.initIrrationalAnalysisMode();\n        break;\n      }\n      case modes.interestingFacts: {\n        this.initInterestingFactsMode();\n        break;\n      }\n      default: {\n        console.log('This is impossible to achieve');\n      }\n    }\n    this.setState({ currentMode: mode, configurations });\n  }\n\n  onPureRandomCheckBoxChange(event) {\n    const { configurations } = this.state;\n    if (configurations.pureRandom[event.target.value]) {\n      configurations.pureRandom[event.target.value] = false;\n    } else {\n      configurations.pureRandom[event.target.value] = true;\n    }\n    this.setState({ configurations });\n  }\n\n  onConfigurableRandomInputChange(event) {\n    const { configurations } = this.state;\n    if (event.target.dataset.type === 'positive') {\n      limitNumericalInput(\n        configurations.configurableRandom,\n        event.target.name,\n        event.target.value,\n        1,\n        20,\n        true\n      );\n    }\n\n    this.setState({ configurations });\n  }\n\n  onClusteringSimulationInputChange(event) {\n    const { configurations } = this.state;\n    if (event.target.dataset.type === 'max-number') {\n      limitNumericalInput(\n        configurations.clusteringSimulation,\n        event.target.name,\n        event.target.value,\n        1,\n        1000000,\n        false\n      );\n    } else if (event.target.dataset.type === 'clusters') {\n      limitNumericalInput(\n        configurations.clusteringSimulation,\n        event.target.name,\n        event.target.value,\n        1,\n        10,\n        true\n      );\n    } else if (event.target.dataset.type === 'frequency') {\n      limitNumericalInput(\n        configurations.clusteringSimulation,\n        event.target.name,\n        event.target.value,\n        1,\n        5,\n        true\n      );\n    }\n\n    this.setState({ configurations });\n  }\n\n  onPrimeFactorizationInputChange(event) {\n    const { configurations } = this.state;\n    if (event.target.dataset.type === 'positive') {\n      limitNumericalInput(\n        configurations.primeFactorization,\n        event.target.name,\n        event.target.value,\n        2,\n        1000000000,\n        true\n      );\n    }\n\n    this.setState({ configurations });\n  }\n\n  onIrrationalAnalysisInputChange(event) {\n    const { configurations } = this.state;\n    if (event.target.dataset.type === 'positive') {\n      limitNumericalInput(\n        configurations.irrationalAnalysis,\n        event.target.name,\n        event.target.value,\n        1,\n        1000000,\n        true\n      );\n    }\n\n    this.setState({ configurations });\n  }\n\n  onInterestingFactsRadioChange(event) {\n    const { configurations } = this.state;\n    let options = configurations.interestingFacts[event.target.name];\n\n    configurations.interestingFacts.current = event.target.name;\n\n    this.setState({ configurations, options, rerenderChart: true }, () => {\n      this.setState({ rerenderChart: false });\n    });\n  }\n\n  renderOptionsDropdown() {\n    return (\n      <div className=\"dropdown\">\n        <button className=\"btn btn-primary dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">\n          Configurations&nbsp;\n          <span className=\"caret\"></span>\n        </button>\n        <ul className=\"dropdown-menu\">\n          <li className=\"dropdown-header\">Random Data</li>\n          <li className=\"dropdown-menu__item\">\n            <a onClick={() => this.dropdownClickHandler(modes.pureRandom)}>\n              {modes.pureRandom}\n              <Tooltip text={tooltips.pureRandom} addClass=\"dropdown-menu__help\" />\n            </a>\n          </li>\n          <li className=\"dropdown-menu__item\">\n            <a onClick={() => this.dropdownClickHandler(modes.configurableRandom)}>\n              {modes.configurableRandom}\n              <Tooltip text={tooltips.configurableRandom} addClass=\"dropdown-menu__help\" />\n            </a>\n          </li>\n          <li className=\"dropdown-menu__item\">\n            <a onClick={() => this.dropdownClickHandler(modes.clusteringSimulation)}>\n              {modes.clusteringSimulation}\n              <Tooltip text={tooltips.clusteringSimulation} addClass=\"dropdown-menu__help\" />\n            </a>\n          </li>\n          <li className=\"divider\"></li>\n          <li className=\"dropdown-header\">Analysis Section</li>\n          <li className=\"dropdown-menu__item\">\n            <a onClick={() => this.dropdownClickHandler(modes.primeFactorization)}>\n              {modes.primeFactorization}\n              <Tooltip text={tooltips.primeFactorization} addClass=\"dropdown-menu__help\" />\n            </a>\n          </li>\n          <li className=\"dropdown-menu__item\">\n            <a onClick={() => this.dropdownClickHandler(modes.irrationalAnalysis)}>\n              {modes.irrationalAnalysis}\n              <Tooltip text={tooltips.irrationalAnalysis} addClass=\"dropdown-menu__help\" />\n            </a>\n          </li>\n          <li className=\"divider\"></li>\n          <li className=\"dropdown-header\">Real World Data</li>\n          <li className=\"dropdown-menu__item\">\n            <a onClick={() => this.dropdownClickHandler(modes.interestingFacts)}>\n              {modes.interestingFacts}\n              <Tooltip text={tooltips.interestingFacts} addClass=\"dropdown-menu__help\" />\n            </a>\n          </li>\n        </ul>\n      </div>\n    );\n  }\n\n  renderPureRandomModeConfiguration() {\n    const { pureRandom } = this.state.configurations;\n    return (\n      <div className=\"pure-random\">\n        <div className=\"checkbox\">\n          <label>\n            <input\n              type=\"checkbox\"\n              value={optionsPureRandom.title}\n              checked={pureRandom.title}\n              onChange={this.onPureRandomCheckBoxChange}\n            />\n            Show Chart Title\n          </label>\n        </div>\n        <div className=\"checkbox\">\n          <label>\n            <input\n              type=\"checkbox\"\n              value={optionsPureRandom.dataLabels}\n              checked={pureRandom.dataLabels}\n              onChange={this.onPureRandomCheckBoxChange}\n            />\n            Show Data Labels\n          </label>\n        </div>\n        <div className=\"checkbox\">\n          <label>\n            <input\n              type=\"checkbox\"\n              value={optionsPureRandom.legend}\n              checked={pureRandom.legend}\n              onChange={this.onPureRandomCheckBoxChange}\n            />\n            Show Legend\n          </label>\n        </div>\n        <div className=\"checkbox\">\n          <label>\n            <input\n              type=\"checkbox\"\n              value={optionsPureRandom.tooltip}\n              checked={pureRandom.tooltip}\n              onChange={this.onPureRandomCheckBoxChange}\n            />\n            Enable Tooltip\n          </label>\n        </div>\n        <div className=\"checkbox\">\n          <label>\n            <input\n              type=\"checkbox\"\n              value={optionsPureRandom.donut}\n              checked={pureRandom.donut}\n              onChange={this.onPureRandomCheckBoxChange}\n            />\n            Donut Mode\n          </label>\n        </div>\n        <div className=\"checkbox\">\n          <label>\n            <input\n              type=\"checkbox\"\n              value={optionsPureRandom.threeDimensions}\n              checked={pureRandom.threeDimensions}\n              onChange={this.onPureRandomCheckBoxChange}\n            />\n            3D Mode\n          </label>\n        </div>\n        <div className=\"checkbox\">\n          <label>\n            <input\n              type=\"checkbox\"\n              value={optionsPureRandom.animation}\n              checked={pureRandom.animation}\n              onChange={this.onPureRandomCheckBoxChange}\n            />\n            Enable Animation\n          </label>\n        </div>\n\n        <button\n          type=\"button\"\n          className=\"btn btn-success apply-button\"\n          onClick={this.updatePureRandomConfiguration}\n        >\n          Apply\n        </button>\n      </div>\n    );\n  }\n\n  renderConfigurableRandomModeConfiguration() {\n    const { configurableRandom } = this.state.configurations;\n    return (\n      <div className=\"configurable-random\">\n        <div className=\"form-group config-option\">\n          <label>Number of series</label>\n          <input\n            type=\"number\"\n            data-type=\"positive\"\n            className=\"form-control\"\n            name={optionsConfigurableRandom.seriesNumber}\n            value={configurableRandom.seriesNumber}\n            onChange={this.onConfigurableRandomInputChange}\n          />\n        </div>\n\n        <button\n          type=\"button\"\n          className=\"btn btn-success apply-button\"\n          onClick={this.updateConfigurableRandomConfiguration}\n        >\n          Apply\n        </button>\n      </div>\n    );\n  }\n\n  renderClusteringSimulationModeConfiguration() {\n    const { clusteringSimulation } = this.state.configurations;\n    return (\n      <div className=\"clustering-simulation\">\n        <div className=\"form-group config-option\">\n          <label>Max number</label>\n          <input\n            type=\"number\"\n            data-type=\"max-number\"\n            className=\"form-control\"\n            name={optionsClusteringSimulation.maxNumber}\n            value={clusteringSimulation.maxNumber}\n            onChange={this.onClusteringSimulationInputChange}\n          />\n        </div>\n        <div className=\"form-group config-option\">\n          <label>Number of clusters</label>\n          <input\n            type=\"number\"\n            data-type=\"clusters\"\n            className=\"form-control\"\n            name={optionsClusteringSimulation.clusterNumber}\n            value={clusteringSimulation.clusterNumber}\n            onChange={this.onClusteringSimulationInputChange}\n          />\n        </div>\n        <div className=\"form-group config-option\">\n          <label>Frequency</label>\n          <input\n            type=\"number\"\n            data-type=\"frequency\"\n            className=\"form-control\"\n            name={optionsClusteringSimulation.frequency}\n            value={clusteringSimulation.frequency}\n            onChange={this.onClusteringSimulationInputChange}\n          />\n        </div>\n\n        {clusteringSimulation.isRunning ? (\n          <button\n            type=\"button\"\n            className=\"btn btn-danger apply-button position-dynamic\"\n            onClick={this.updateClusteringSimulationConfiguration}\n          >\n            Stop Simulation\n          </button>\n        ) : (\n          <button\n            type=\"button\"\n            className=\"btn btn-success apply-button position-dynamic\"\n            onClick={this.updateClusteringSimulationConfiguration}\n          >\n            Start Simulation\n          </button>\n        )}\n      </div>\n    );\n  }\n\n  renderPrimeFactorizationModeConfiguration() {\n    const { primeFactorization } = this.state.configurations;\n    return (\n      <div className=\"prime-factorization\">\n        <div className=\"form-group config-option\">\n          <label>Number for factorization</label>\n          <input\n            type=\"number\"\n            data-type=\"positive\"\n            className=\"form-control\"\n            name={optionsPrimeFactorization.input}\n            value={primeFactorization.input}\n            onChange={this.onPrimeFactorizationInputChange}\n          />\n        </div>\n\n        <button\n          type=\"button\"\n          className=\"btn btn-success apply-button\"\n          onClick={this.updatePrimeFactorizationConfiguration}\n        >\n          Apply\n        </button>\n      </div>\n    );\n  }\n\n  renderIrrationalAnalysisModeConfiguration() {\n    const { irrationalAnalysis } = this.state.configurations;\n    return (\n      <div className=\"irrational-analysis\">\n        <div className=\"form-group config-option\">\n          <label>Number of digits</label>\n          <input\n            type=\"number\"\n            data-type=\"positive\"\n            className=\"form-control\"\n            name={optionsIrrationalAnalysis.input}\n            value={irrationalAnalysis.input}\n            onChange={this.onIrrationalAnalysisInputChange}\n          />\n        </div>\n\n        <button\n          type=\"button\"\n          className=\"btn btn-success apply-button\"\n          onClick={this.updateIrrationalAnalysisConfiguration}\n        >\n          Apply\n        </button>\n      </div>\n    );\n  }\n\n  renderInterestingFactsModeConfiguration() {\n    const { interestingFacts } = this.state.configurations;\n    return (\n      <div className=\"interesting-facts\">\n        <div className=\"radio\">\n          <label>\n            <input\n              type=\"radio\"\n              name={optionsInterestingFacts.first}\n              checked={interestingFacts.current === optionsInterestingFacts.first}\n              onChange={this.onInterestingFactsRadioChange}\n            />\n            Earth Composition\n          </label>\n        </div>\n        <div className=\"radio\">\n          <label>\n            <input\n              type=\"radio\"\n              name={optionsInterestingFacts.second}\n              checked={interestingFacts.current === optionsInterestingFacts.second}\n              onChange={this.onInterestingFactsRadioChange}\n            />\n            Earth Population\n          </label>\n        </div>\n        <div className=\"radio\">\n          <label>\n            <input\n              type=\"radio\"\n              name={optionsInterestingFacts.third}\n              checked={interestingFacts.current === optionsInterestingFacts.third}\n              onChange={this.onInterestingFactsRadioChange}\n            />\n            Earth Atmosphere\n          </label>\n        </div>\n        <div className=\"radio\">\n          <label>\n            <input\n              type=\"radio\"\n              name={optionsInterestingFacts.fourth}\n              checked={interestingFacts.current === optionsInterestingFacts.fourth}\n              onChange={this.onInterestingFactsRadioChange}\n            />\n            Earth Chemistry\n          </label>\n        </div>\n        <div className=\"radio\">\n          <label>\n            <input\n              type=\"radio\"\n              name={optionsInterestingFacts.fifth}\n              checked={interestingFacts.current === optionsInterestingFacts.fifth}\n              onChange={this.onInterestingFactsRadioChange}\n            />\n            Human Chemistry\n          </label>\n        </div>\n        <div className=\"radio\">\n          <label>\n            <input\n              type=\"radio\"\n              name={optionsInterestingFacts.sixth}\n              checked={interestingFacts.current === optionsInterestingFacts.sixth}\n              onChange={this.onInterestingFactsRadioChange}\n            />\n            Modern Life Time\n          </label>\n        </div>\n      </div>\n    );\n  }\n\n  renderConfigurationsArea() {\n    const { currentMode } = this.state;\n    switch (currentMode) {\n      case modes.pureRandom: {\n        return this.renderPureRandomModeConfiguration();\n      }\n      case modes.configurableRandom: {\n        return this.renderConfigurableRandomModeConfiguration();\n      }\n      case modes.clusteringSimulation: {\n        return this.renderClusteringSimulationModeConfiguration();\n      }\n      case modes.primeFactorization: {\n        return this.renderPrimeFactorizationModeConfiguration();\n      }\n      case modes.irrationalAnalysis: {\n        return this.renderIrrationalAnalysisModeConfiguration();\n      }\n      case modes.interestingFacts: {\n        return this.renderInterestingFactsModeConfiguration();\n      }\n      default: {\n        return null;\n      }\n    }\n  }\n\n  render() {\n    console.log('pie state: ', this.state);\n    return (\n      <div className=\"pie-page\" key={`pie-chart-${this.state.currentMode}`}>\n        <div className=\"row\">\n          <div className=\"col-sm-4\">\n            {this.renderOptionsDropdown()}\n            <div className=\"configuration-area\">{this.renderConfigurationsArea()}</div>\n          </div>\n          <div className=\"col-sm-8 chart-area\">\n            <Chart\n              container={'pie-chart'}\n              options={this.state.options}\n              update={this.state.rerenderChart}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","/Users/dkoval/dev/React-Highcharts/src/components/charts/playground.js",[],"/Users/dkoval/dev/React-Highcharts/src/components/charts/scatter.js",["175","176","177","178","179","180","181"],"import React, { Component } from 'react';\nimport Highcharts from 'highcharts';\n\nimport Chart from './chart-abstract';\n\nimport {\n  pureRandom2D,\n  pureRandom3D,\n  pureRandomBubble,\n  configurableRandom2D,\n  configurableRandom3D,\n  configurableRandomBubble,\n  shootingSimulation,\n} from '../../constants/scatter/default-options-scatter';\n\nimport {\n  modes,\n  initialState,\n  optionsPureRandom2D,\n  optionsPureRandom3D,\n  optionsPureRandomBubble,\n  optionsConfigurableRandom,\n  optionsShootingSimulation,\n} from '../../constants/scatter/modes-options-scatter';\n\nimport {\n  move,\n  convertColorsTo3D,\n  convertColorsToBubbles,\n  convertColorsToFlat,\n  generateSeriesForPureRandom2D,\n  generateSeriesForPureRandom3D,\n  generateSeriesForPureRandomBubble,\n  generateSeriesForConfigurableRandom,\n  generateShotsByParams,\n  generateHistogramByParamsAndData,\n} from '../../constants/scatter/data-helpers-scatter';\n\nimport { limitNumericalInput } from '../../constants/shared/helpers';\n\nexport default class Scattering extends Component {\n  constructor(props) {\n    super(props);\n    this.state = initialState;\n    this.state.defaultColors = Highcharts.getOptions().colors.slice();\n    this.dropdownClickHandler = this.dropdownClickHandler.bind(this);\n    this.updatePureRandom2DConfiguration = this.updatePureRandom2DConfiguration.bind(this);\n    this.updatePureRandom3DConfiguration = this.updatePureRandom3DConfiguration.bind(this);\n    this.updatePureRandomBubbleConfiguration = this.updatePureRandomBubbleConfiguration.bind(this);\n    this.updateConfigurableRandomConfiguration = this.updateConfigurableRandomConfiguration.bind(\n      this\n    );\n    this.updateShootingSimulationConfiguration = this.updateShootingSimulationConfiguration.bind(\n      this\n    );\n    this.onPureRandom2DCheckBoxChange = this.onPureRandom2DCheckBoxChange.bind(this);\n    this.onPureRandom3DCheckBoxChange = this.onPureRandom3DCheckBoxChange.bind(this);\n    this.onPureRandomBubbleCheckBoxChange = this.onPureRandomBubbleCheckBoxChange.bind(this);\n    this.onConfigurableRandomInputChange = this.onConfigurableRandomInputChange.bind(this);\n    this.onShootingSimulationInputChange = this.onShootingSimulationInputChange.bind(this);\n    this.onAddPointsShootingMode = this.onAddPointsShootingMode.bind(this);\n  }\n\n  componentDidMount() {\n    this.initPureRandom2DMode();\n  }\n\n  initPureRandom2DMode() {\n    const options = pureRandom2D;\n    options.series = generateSeriesForPureRandom2D();\n    this.setState({ options }, () => {\n      this.updatePureRandom2DConfiguration();\n    });\n  }\n\n  initPureRandom3DMode() {\n    const options = pureRandom3D;\n    options.series = generateSeriesForPureRandom3D();\n    this.setState({ options }, () => {\n      this.updatePureRandom3DConfiguration();\n    });\n  }\n\n  initPureRandomBubbleMode() {\n    const options = pureRandomBubble;\n    options.series = generateSeriesForPureRandomBubble();\n    this.setState({ options }, () => {\n      this.updatePureRandomBubbleConfiguration();\n    });\n  }\n\n  initConfigurableRandomMode() {\n    const options = configurableRandom2D;\n    this.setState({ options }, () => {\n      this.updateConfigurableRandomConfiguration();\n    });\n  }\n\n  initShootingSimulationMode() {\n    const options = shootingSimulation;\n\n    this.setState({ options }, () => {\n      this.updateShootingSimulationConfiguration();\n    });\n  }\n\n  updatePureRandom2DConfiguration() {\n    const { pureRandom2D } = this.state.configurations;\n    const { options } = this.state;\n    options.chart.zoomType = pureRandom2D.zoom ? 'xy' : null;\n    options.title.text = pureRandom2D.title ? 'Randomly generated data' : null;\n    options.subtitle.text = pureRandom2D.title ? 'Randomly generated data' : null;\n    options.legend.enabled = pureRandom2D.legend;\n    options.yAxis.title.text = pureRandom2D.axisTitle ? 'Random Value (UOM)' : null;\n    options.xAxis.title.text = pureRandom2D.axisTitle ? 'Random Value (UOM)' : null;\n    options.plotOptions.scatter.marker.radius = pureRandom2D.smallMarkers ? 2 : 5;\n    options.plotOptions.scatter.dataLabels.enabled = pureRandom2D.dataLabels;\n    options.tooltip.enabled = pureRandom2D.tooltip;\n    options.plotOptions.series.animation = pureRandom2D.animation;\n    options.series.forEach(serie => {\n      serie.colorByPoint = pureRandom2D.colors;\n    });\n\n    this.setState({ rerenderChart: true }, () => {\n      this.setState({ rerenderChart: false });\n    });\n  }\n\n  updatePureRandom3DConfiguration() {\n    const { pureRandom3D } = this.state.configurations;\n    const { options } = this.state;\n    options.title.text = pureRandom3D.title ? 'Randomly generated data' : null;\n    options.subtitle.text = pureRandom3D.title\n      ? 'Click and drag the plot area to rotate in space'\n      : null;\n    options.legend.enabled = pureRandom3D.legend;\n    options.yAxis.title.text = pureRandom3D.axisTitle ? 'Random Value (UOM)' : null;\n    options.xAxis.title.text = pureRandom3D.axisTitle ? 'Random Value (UOM)' : null;\n    options.zAxis.title.text = pureRandom3D.axisTitle ? 'Random Value (UOM)' : null;\n    options.plotOptions.scatter3d.marker.radius = pureRandom3D.smallMarkers ? 2 : 5;\n    options.plotOptions.scatter3d.dataLabels.enabled = pureRandom3D.dataLabels;\n    options.tooltip.enabled = pureRandom3D.tooltip;\n    options.plotOptions.series.animation = pureRandom3D.animation;\n    options.series.forEach((serie, i) => {\n      serie.colorByPoint = pureRandom3D.colors;\n    });\n\n    this.setState({ rerenderChart: true }, () => {\n      this.setState({ rerenderChart: false });\n    });\n  }\n\n  updatePureRandomBubbleConfiguration() {\n    const { pureRandomBubble } = this.state.configurations;\n    const { options } = this.state;\n    options.chart.zoomType = pureRandomBubble.zoom ? 'xy' : null;\n    options.title.text = pureRandomBubble.title ? 'Randomly generated data' : null;\n    options.subtitle.text = pureRandomBubble.title ? 'Randomly generated data' : null;\n    options.legend.enabled = pureRandomBubble.legend;\n    options.yAxis.title.text = pureRandomBubble.axisTitle ? 'Random Value (UOM)' : null;\n    options.xAxis.title.text = pureRandomBubble.axisTitle ? 'Random Value (UOM)' : null;\n    options.plotOptions.bubble.dataLabels.enabled = pureRandomBubble.dataLabels;\n    options.tooltip.enabled = pureRandomBubble.tooltip;\n    options.plotOptions.series.animation = pureRandomBubble.animation;\n    options.series.forEach((serie, i) => {\n      serie.colorByPoint = pureRandomBubble.colors;\n    });\n\n    this.setState({ rerenderChart: true }, () => {\n      this.setState({ rerenderChart: false });\n    });\n  }\n\n  updateConfigurableRandomConfiguration() {\n    const { configurableRandom } = this.state.configurations;\n    const { defaultColors } = this.state;\n    let options;\n    switch (configurableRandom.chartType) {\n      case '2D':\n        options = configurableRandom2D;\n        convertColorsToFlat(defaultColors);\n        break;\n      case '3D':\n        options = configurableRandom3D;\n        convertColorsTo3D(defaultColors);\n        break;\n      case 'Bubble':\n        options = configurableRandomBubble;\n        convertColorsToBubbles(defaultColors);\n        break;\n    }\n    const series = generateSeriesForConfigurableRandom(configurableRandom);\n    options.series = series;\n\n    this.setState({ options, rerenderChart: true }, () => {\n      this.setState({ rerenderChart: false });\n    });\n  }\n\n  updateShootingSimulationConfiguration() {\n    const { shootingSimulation } = this.state.configurations;\n    const { minX, maxX, minY, maxY, bins } = shootingSimulation;\n    const { options } = this.state;\n\n    shootingSimulation.disabled = false;\n    options.xAxis[1].categories = [];\n    options.xAxis[0].min = minX;\n    options.xAxis[0].max = maxX;\n    options.yAxis[0].min = minY;\n    options.yAxis[0].max = maxY;\n\n    options.series[0].data = [];\n    options.series[1].data = [];\n\n    this.setState({ options, rerenderChart: true }, () => {\n      this.setState({ rerenderChart: false });\n    });\n  }\n\n  onAddPointsShootingMode(event) {\n    const { shootingSimulation } = this.state.configurations;\n    const { minX, maxX, minY, maxY, bins } = shootingSimulation;\n    shootingSimulation.disabled = true;\n    const { options } = this.state;\n    if (event) {\n      const amount = Number(event.target.dataset.amount);\n\n      const newPoints = generateShotsByParams(amount, minX, maxX, minY, maxY);\n      const newData = options.series[1].data.concat(newPoints);\n      const newHistogram = generateHistogramByParamsAndData(newData, bins, minX, maxX, minY, maxY);\n\n      options.xAxis[1].categories = newHistogram.categories;\n      options.xAxis[0].min = minX;\n      options.xAxis[0].max = maxX;\n      options.yAxis[0].min = minY;\n      options.yAxis[0].max = maxY;\n\n      options.series[0].data = newHistogram.values;\n      options.series[1].data = newData;\n    }\n\n    this.setState({ options, rerenderChart: true }, () => {\n      this.setState({ rerenderChart: false });\n    });\n  }\n\n  dropdownClickHandler(input) {\n    const mode = input.target.innerHTML;\n    const { configurations, defaultColors } = this.state;\n    switch (mode) {\n      case modes.pureRandom2D: {\n        convertColorsToFlat(defaultColors);\n        this.initPureRandom2DMode();\n        break;\n      }\n      case modes.pureRandom3D: {\n        convertColorsTo3D(defaultColors);\n        this.initPureRandom3DMode();\n        break;\n      }\n      case modes.pureRandomBubble: {\n        convertColorsToBubbles(defaultColors);\n        this.initPureRandomBubbleMode();\n        break;\n      }\n      case modes.configurableRandom: {\n        convertColorsToFlat(defaultColors);\n        this.initConfigurableRandomMode();\n        break;\n      }\n      case modes.shootingSimulation: {\n        convertColorsToFlat(defaultColors);\n        this.initShootingSimulationMode();\n        break;\n      }\n      default: {\n        console.log('This mode is not implemented yet');\n      }\n    }\n    this.setState({ currentMode: mode, configurations });\n  }\n\n  onPureRandom2DCheckBoxChange(event) {\n    const { configurations } = this.state;\n    if (configurations.pureRandom2D[event.target.value]) {\n      configurations.pureRandom2D[event.target.value] = false;\n    } else {\n      configurations.pureRandom2D[event.target.value] = true;\n    }\n    this.setState({ configurations });\n  }\n\n  onPureRandom3DCheckBoxChange(event) {\n    const { configurations } = this.state;\n    if (configurations.pureRandom3D[event.target.value]) {\n      configurations.pureRandom3D[event.target.value] = false;\n    } else {\n      configurations.pureRandom3D[event.target.value] = true;\n    }\n    this.setState({ configurations });\n  }\n\n  onPureRandomBubbleCheckBoxChange(event) {\n    const { configurations } = this.state;\n    if (configurations.pureRandomBubble[event.target.value]) {\n      configurations.pureRandomBubble[event.target.value] = false;\n    } else {\n      configurations.pureRandomBubble[event.target.value] = true;\n    }\n    this.setState({ configurations });\n  }\n\n  onConfigurableRandomInputChange(event) {\n    const { configurations } = this.state;\n    if (event.target.dataset.type === 'series') {\n      limitNumericalInput(\n        configurations.configurableRandom,\n        event.target.name,\n        event.target.value,\n        1,\n        20,\n        true\n      );\n    } else if (event.target.dataset.type === 'points') {\n      limitNumericalInput(\n        configurations.configurableRandom,\n        event.target.name,\n        event.target.value,\n        1,\n        1000,\n        true\n      );\n    } else {\n      configurations.configurableRandom[event.target.name] = event.target.value;\n    }\n    this.setState({ configurations });\n  }\n\n  onShootingSimulationInputChange(event) {\n    const { configurations } = this.state;\n    if (event.target.name === 'minX') {\n      limitNumericalInput(\n        configurations.shootingSimulation,\n        event.target.name,\n        event.target.value,\n        -1000,\n        configurations.shootingSimulation.maxX,\n        false\n      );\n    } else if (event.target.name === 'maxX') {\n      limitNumericalInput(\n        configurations.shootingSimulation,\n        event.target.name,\n        event.target.value,\n        configurations.shootingSimulation.minX,\n        1000,\n        false\n      );\n    } else if (event.target.name === 'minY') {\n      limitNumericalInput(\n        configurations.shootingSimulation,\n        event.target.name,\n        event.target.value,\n        -1000,\n        configurations.shootingSimulation.maxY,\n        false\n      );\n    } else if (event.target.name === 'maxY') {\n      limitNumericalInput(\n        configurations.shootingSimulation,\n        event.target.name,\n        event.target.value,\n        configurations.shootingSimulation.minY,\n        10000,\n        false\n      );\n    } else if (event.target.name === 'bins') {\n      limitNumericalInput(\n        configurations.shootingSimulation,\n        event.target.name,\n        event.target.value,\n        1,\n        20,\n        true\n      );\n    }\n    this.setState({ configurations });\n  }\n\n  renderOptionsDropdown() {\n    return (\n      <div className=\"dropdown\">\n        <button className=\"btn btn-primary dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">\n          Configurations\n          <span className=\"caret\"></span>\n        </button>\n        <ul className=\"dropdown-menu\">\n          <li className=\"dropdown-header\">Random Data</li>\n          <li>\n            <a onClick={this.dropdownClickHandler}>{modes.pureRandom2D}</a>\n          </li>\n          <li>\n            <a onClick={this.dropdownClickHandler}>{modes.pureRandom3D}</a>\n          </li>\n          <li>\n            <a onClick={this.dropdownClickHandler}>{modes.pureRandomBubble}</a>\n          </li>\n          <li>\n            <a onClick={this.dropdownClickHandler}>{modes.configurableRandom}</a>\n          </li>\n          <li className=\"divider\"></li>\n          <li className=\"dropdown-header\">Process Visualization</li>\n          <li>\n            <a onClick={this.dropdownClickHandler}>{modes.shootingSimulation}</a>\n          </li>\n        </ul>\n      </div>\n    );\n  }\n\n  renderPureRandom2DModeConfiguration() {\n    const { pureRandom2D } = this.state.configurations;\n    return (\n      <div className=\"pure-random\">\n        <div className=\"checkbox\">\n          <label>\n            <input\n              type=\"checkbox\"\n              value={optionsPureRandom2D.title}\n              checked={pureRandom2D.title}\n              onChange={this.onPureRandom2DCheckBoxChange}\n            />\n            Show Chart Title\n          </label>\n        </div>\n        <div className=\"checkbox\">\n          <label>\n            <input\n              type=\"checkbox\"\n              value={optionsPureRandom2D.axisTitle}\n              checked={pureRandom2D.axisTitle}\n              onChange={this.onPureRandom2DCheckBoxChange}\n            />\n            Show Axis Titles\n          </label>\n        </div>\n        <div className=\"checkbox\">\n          <label>\n            <input\n              type=\"checkbox\"\n              value={optionsPureRandom2D.dataLabels}\n              checked={pureRandom2D.dataLabels}\n              onChange={this.onPureRandom2DCheckBoxChange}\n            />\n            Show Data Labels\n          </label>\n        </div>\n        <div className=\"checkbox\">\n          <label>\n            <input\n              type=\"checkbox\"\n              value={optionsPureRandom2D.legend}\n              checked={pureRandom2D.legend}\n              onChange={this.onPureRandom2DCheckBoxChange}\n            />\n            Show Legend\n          </label>\n        </div>\n        <div className=\"checkbox\">\n          <label>\n            <input\n              type=\"checkbox\"\n              value={optionsPureRandom2D.tooltip}\n              checked={pureRandom2D.tooltip}\n              onChange={this.onPureRandom2DCheckBoxChange}\n            />\n            Enable Tooltip\n          </label>\n        </div>\n        <div className=\"checkbox\">\n          <label>\n            <input\n              type=\"checkbox\"\n              value={optionsPureRandom2D.zoom}\n              checked={pureRandom2D.zoom}\n              onChange={this.onPureRandom2DCheckBoxChange}\n            />\n            Enable Zoom\n          </label>\n        </div>\n        <div className=\"checkbox\">\n          <label>\n            <input\n              type=\"checkbox\"\n              value={optionsPureRandom2D.animation}\n              checked={pureRandom2D.animation}\n              onChange={this.onPureRandom2DCheckBoxChange}\n            />\n            Enable Animation\n          </label>\n        </div>\n        <div className=\"checkbox\">\n          <label>\n            <input\n              type=\"checkbox\"\n              value={optionsPureRandom2D.smallMarkers}\n              checked={pureRandom2D.smallMarkers}\n              onChange={this.onPureRandom2DCheckBoxChange}\n            />\n            Small Markers\n          </label>\n        </div>\n        <div className=\"checkbox\">\n          <label>\n            <input\n              type=\"checkbox\"\n              value={optionsPureRandom2D.colors}\n              checked={pureRandom2D.colors}\n              onChange={this.onPureRandom2DCheckBoxChange}\n            />\n            Color Per Point\n          </label>\n        </div>\n\n        <button\n          type=\"button\"\n          className=\"btn btn-success apply-button\"\n          onClick={this.updatePureRandom2DConfiguration}\n        >\n          Apply\n        </button>\n      </div>\n    );\n  }\n\n  renderPureRandom3DModeConfiguration() {\n    const { pureRandom3D } = this.state.configurations;\n    return (\n      <div className=\"pure-random\">\n        <div className=\"checkbox\">\n          <label>\n            <input\n              type=\"checkbox\"\n              value={optionsPureRandom3D.title}\n              checked={pureRandom3D.title}\n              onChange={this.onPureRandom3DCheckBoxChange}\n            />\n            Show Chart Title\n          </label>\n        </div>\n        <div className=\"checkbox\">\n          <label>\n            <input\n              type=\"checkbox\"\n              value={optionsPureRandom3D.axisTitle}\n              checked={pureRandom3D.axisTitle}\n              onChange={this.onPureRandom3DCheckBoxChange}\n            />\n            Show Axis Titles\n          </label>\n        </div>\n        <div className=\"checkbox\">\n          <label>\n            <input\n              type=\"checkbox\"\n              value={optionsPureRandom3D.dataLabels}\n              checked={pureRandom3D.dataLabels}\n              onChange={this.onPureRandom3DCheckBoxChange}\n            />\n            Show Data Labels\n          </label>\n        </div>\n        <div className=\"checkbox\">\n          <label>\n            <input\n              type=\"checkbox\"\n              value={optionsPureRandom3D.legend}\n              checked={pureRandom3D.legend}\n              onChange={this.onPureRandom3DCheckBoxChange}\n            />\n            Show Legend\n          </label>\n        </div>\n        <div className=\"checkbox\">\n          <label>\n            <input\n              type=\"checkbox\"\n              value={optionsPureRandom3D.tooltip}\n              checked={pureRandom3D.tooltip}\n              onChange={this.onPureRandom3DCheckBoxChange}\n            />\n            Enable Tooltip\n          </label>\n        </div>\n        <div className=\"checkbox\">\n          <label>\n            <input\n              type=\"checkbox\"\n              value={optionsPureRandom3D.animation}\n              checked={pureRandom3D.animation}\n              onChange={this.onPureRandom3DCheckBoxChange}\n            />\n            Enable Animation\n          </label>\n        </div>\n        <div className=\"checkbox\">\n          <label>\n            <input\n              type=\"checkbox\"\n              value={optionsPureRandom3D.smallMarkers}\n              checked={pureRandom3D.smallMarkers}\n              onChange={this.onPureRandom3DCheckBoxChange}\n            />\n            Small Markers\n          </label>\n        </div>\n        <div className=\"checkbox\">\n          <label>\n            <input\n              type=\"checkbox\"\n              value={optionsPureRandom3D.colors}\n              checked={pureRandom3D.colors}\n              onChange={this.onPureRandom3DCheckBoxChange}\n            />\n            Color Per Point\n          </label>\n        </div>\n\n        <button\n          type=\"button\"\n          className=\"btn btn-success apply-button\"\n          onClick={this.updatePureRandom3DConfiguration}\n        >\n          Apply\n        </button>\n      </div>\n    );\n  }\n\n  renderPureRandomBubbleModeConfiguration() {\n    const { pureRandomBubble } = this.state.configurations;\n    return (\n      <div className=\"pure-random\">\n        <div className=\"checkbox\">\n          <label>\n            <input\n              type=\"checkbox\"\n              value={optionsPureRandomBubble.title}\n              checked={pureRandomBubble.title}\n              onChange={this.onPureRandomBubbleCheckBoxChange}\n            />\n            Show Chart Title\n          </label>\n        </div>\n        <div className=\"checkbox\">\n          <label>\n            <input\n              type=\"checkbox\"\n              value={optionsPureRandomBubble.axisTitle}\n              checked={pureRandomBubble.axisTitle}\n              onChange={this.onPureRandomBubbleCheckBoxChange}\n            />\n            Show Axis Titles\n          </label>\n        </div>\n        <div className=\"checkbox\">\n          <label>\n            <input\n              type=\"checkbox\"\n              value={optionsPureRandomBubble.dataLabels}\n              checked={pureRandomBubble.dataLabels}\n              onChange={this.onPureRandomBubbleCheckBoxChange}\n            />\n            Show Data Labels\n          </label>\n        </div>\n        <div className=\"checkbox\">\n          <label>\n            <input\n              type=\"checkbox\"\n              value={optionsPureRandomBubble.legend}\n              checked={pureRandomBubble.legend}\n              onChange={this.onPureRandomBubbleCheckBoxChange}\n            />\n            Show Legend\n          </label>\n        </div>\n        <div className=\"checkbox\">\n          <label>\n            <input\n              type=\"checkbox\"\n              value={optionsPureRandomBubble.tooltip}\n              checked={pureRandomBubble.tooltip}\n              onChange={this.onPureRandomBubbleCheckBoxChange}\n            />\n            Enable Tooltip\n          </label>\n        </div>\n        <div className=\"checkbox\">\n          <label>\n            <input\n              type=\"checkbox\"\n              value={optionsPureRandomBubble.zoom}\n              checked={pureRandomBubble.zoom}\n              onChange={this.onPureRandomBubbleCheckBoxChange}\n            />\n            Enable Zoom\n          </label>\n        </div>\n        <div className=\"checkbox\">\n          <label>\n            <input\n              type=\"checkbox\"\n              value={optionsPureRandomBubble.animation}\n              checked={pureRandomBubble.animation}\n              onChange={this.onPureRandomBubbleCheckBoxChange}\n            />\n            Enable Animation\n          </label>\n        </div>\n        <div className=\"checkbox\">\n          <label>\n            <input\n              type=\"checkbox\"\n              value={optionsPureRandomBubble.colors}\n              checked={pureRandomBubble.colors}\n              onChange={this.onPureRandomBubbleCheckBoxChange}\n            />\n            Color Per Bubble\n          </label>\n        </div>\n\n        <button\n          type=\"button\"\n          className=\"btn btn-success apply-button\"\n          onClick={this.updatePureRandomBubbleConfiguration}\n        >\n          Apply\n        </button>\n      </div>\n    );\n  }\n\n  renderConfigurableRandomModeConfiguration() {\n    const { configurableRandom } = this.state.configurations;\n    return (\n      <div className=\"configurable-random\">\n        <div className=\"form-group config-option\">\n          <label>Type of the Scattering:</label>\n          <select\n            className=\"form-control\"\n            onChange={this.onConfigurableRandomInputChange}\n            name={optionsConfigurableRandom.chartType}\n          >\n            <option>2D</option>\n            <option>3D</option>\n            <option>Bubble</option>\n          </select>\n        </div>\n        <div className=\"form-group config-option\">\n          <label>Number of series</label>\n          <input\n            type=\"number\"\n            data-type=\"series\"\n            className=\"form-control\"\n            name={optionsConfigurableRandom.seriesNumber}\n            value={configurableRandom.seriesNumber}\n            onChange={this.onConfigurableRandomInputChange}\n          />\n        </div>\n        <div className=\"form-group config-option\">\n          <label>Number of points</label>\n          <input\n            type=\"number\"\n            data-type=\"points\"\n            className=\"form-control\"\n            name={optionsConfigurableRandom.pointsNumber}\n            value={configurableRandom.pointsNumber}\n            onChange={this.onConfigurableRandomInputChange}\n          />\n        </div>\n\n        <button\n          type=\"button\"\n          className=\"btn btn-success apply-button position-dynamic\"\n          onClick={this.updateConfigurableRandomConfiguration}\n        >\n          Apply\n        </button>\n      </div>\n    );\n  }\n\n  renderShootingSimulationModeConfiguration() {\n    const { shootingSimulation } = this.state.configurations;\n    return (\n      <div className=\"shooting\">\n        <div className=\"form-group config-option bins-input\">\n          <label>Number of bins</label>\n          <input\n            type=\"number\"\n            data-type={optionsShootingSimulation.bins}\n            className=\"form-control\"\n            name={optionsShootingSimulation.bins}\n            value={shootingSimulation.bins}\n            onChange={this.onShootingSimulationInputChange}\n            disabled={shootingSimulation.disabled}\n          />\n        </div>\n\n        <div className=\"row\">\n          <div className=\"col-md-6 special-small\">\n            <div className=\"form-group config-option\">\n              <label>Min X</label>\n              <input\n                type=\"number\"\n                data-type={optionsShootingSimulation.minX}\n                className=\"form-control\"\n                name={optionsShootingSimulation.minX}\n                value={shootingSimulation.minX}\n                onChange={this.onShootingSimulationInputChange}\n                disabled={shootingSimulation.disabled}\n              />\n            </div>\n          </div>\n          <div className=\"col-md-6 special-small\">\n            <div className=\"form-group config-option\">\n              <label>Max X</label>\n              <input\n                type=\"number\"\n                data-type={optionsShootingSimulation.maxX}\n                className=\"form-control\"\n                name={optionsShootingSimulation.maxX}\n                value={shootingSimulation.maxX}\n                onChange={this.onShootingSimulationInputChange}\n                disabled={shootingSimulation.disabled}\n              />\n            </div>\n          </div>\n        </div>\n\n        <div className=\"row\">\n          <div className=\"col-md-6 special-small\">\n            <div className=\"form-group config-option\">\n              <label>Min Y</label>\n              <input\n                type=\"number\"\n                data-type={optionsShootingSimulation.minY}\n                className=\"form-control\"\n                name={optionsShootingSimulation.minY}\n                value={shootingSimulation.minY}\n                onChange={this.onShootingSimulationInputChange}\n                disabled={shootingSimulation.disabled}\n              />\n            </div>\n          </div>\n          <div className=\"col-md-6 special-small\">\n            <div className=\"form-group config-option\">\n              <label>Max Y</label>\n              <input\n                type=\"number\"\n                data-type={optionsShootingSimulation.maxY}\n                className=\"form-control\"\n                name={optionsShootingSimulation.maxY}\n                value={shootingSimulation.maxY}\n                onChange={this.onShootingSimulationInputChange}\n                disabled={shootingSimulation.disabled}\n              />\n            </div>\n          </div>\n        </div>\n\n        <div className=\"row basic-config shot-container\">\n          <div className=\"col-md-6 special-small\">\n            <button\n              type=\"button\"\n              className=\"btn btn-primary shot\"\n              data-amount={1}\n              onClick={this.onAddPointsShootingMode}\n            >\n              1 shot\n            </button>\n          </div>\n          <div className=\"col-md-6 special-small\">\n            <button\n              type=\"button\"\n              className=\"btn btn-primary shot\"\n              data-amount={10}\n              onClick={this.onAddPointsShootingMode}\n            >\n              10 shots\n            </button>\n          </div>\n        </div>\n\n        <button\n          type=\"button\"\n          className=\"btn btn-success apply-button position-dynamic\"\n          onClick={this.updateShootingSimulationConfiguration}\n        >\n          Restart\n        </button>\n      </div>\n    );\n  }\n\n  renderConfigurationsArea() {\n    const { currentMode } = this.state;\n    switch (currentMode) {\n      case modes.pureRandom2D: {\n        return this.renderPureRandom2DModeConfiguration();\n      }\n      case modes.pureRandom3D: {\n        return this.renderPureRandom3DModeConfiguration();\n      }\n      case modes.pureRandomBubble: {\n        return this.renderPureRandomBubbleModeConfiguration();\n      }\n      case modes.configurableRandom: {\n        return this.renderConfigurableRandomModeConfiguration();\n      }\n      case modes.shootingSimulation: {\n        return this.renderShootingSimulationModeConfiguration();\n      }\n      default: {\n        return null;\n      }\n    }\n  }\n\n  render() {\n    console.log('scatter state: ', this.state);\n    return (\n      <div className=\"scatter-page\" key={`scatter-chart-${this.state.currentMode}`}>\n        <div className=\"row\">\n          <div className=\"col-sm-4\">\n            {this.renderOptionsDropdown()}\n            <div className=\"configuration-area\">{this.renderConfigurationsArea()}</div>\n          </div>\n          <div className=\"col-sm-8 chart-area\">\n            <Chart\n              container={'scattering-chart'}\n              options={this.state.options}\n              update={this.state.rerenderChart}\n              function={move}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","/Users/dkoval/dev/React-Highcharts/src/components/charts/stock-abstract.js",[],"/Users/dkoval/dev/React-Highcharts/src/components/footer.js",["182","183","184","185"],"import React, { Component } from 'react';\n\nexport default class Footer extends Component {\n  render() {\n    return (\n      <footer>\n        <div className=\"content-padding\">\n          <div className=\"footer-content\">\n            <p>Copyright &copy; Dmytro Kovalenko ;)</p>\n\n            <div className=\"social-media-icons\">\n              <a\n                target=\"_blank\"\n                href=\"https://github.com/KovDimaY/React-Highcharts\"\n                className=\"footer-github\"\n              >\n                <i className=\"fa fa-github\"></i>\n              </a>\n              <a\n                target=\"_blank\"\n                href=\"https://www.facebook.com/dmytro.kovalenko.1004\"\n                className=\"footer-facebook\"\n              >\n                <i className=\"fa fa-facebook\"></i>\n              </a>\n              <a target=\"_blank\" href=\"https://www.vk.com/id11545172\" className=\"footer-vk\">\n                <i className=\"fa fa-vk\"></i>\n              </a>\n              <a\n                target=\"_blank\"\n                href=\"https://www.linkedin.com/in/kovalenkodmytro\"\n                className=\"footer-linkedin\"\n              >\n                <i className=\"fa fa-linkedin\"></i>\n              </a>\n            </div>\n          </div>\n        </div>\n      </footer>\n    );\n  }\n}\n","/Users/dkoval/dev/React-Highcharts/src/components/header.js",[],"/Users/dkoval/dev/React-Highcharts/src/components/home.js",[],"/Users/dkoval/dev/React-Highcharts/src/components/notFound.js",[],"/Users/dkoval/dev/React-Highcharts/src/components/tooltip.js",["186","187","188"],"import React from 'react';\n\n//possible position of tooltip\nconst TOP = 'top';\nconst RIGHT = 'right';\nconst BOTTOM = 'bottom';\nconst LEFT = 'left';\n\nexport default function Tooltip(props) {\n  const {\n    text,\n    addClass,\n    position = BOTTOM,\n    hoverElement = <span className=\"help__icon\">?</span>,\n  } = props;\n\n  const defaultWrapperClass = ['help'];\n  defaultWrapperClass.push(position);\n\n  if (addClass) {\n    defaultWrapperClass.push(addClass);\n  }\n\n  const wrapperClasses = defaultWrapperClass.join(' ');\n\n  return (\n    <div className={wrapperClasses}>\n      {hoverElement}\n      <div className=\"help__content\">\n        <span className=\"help__text\">{text}</span>\n      </div>\n    </div>\n  );\n}\n","/Users/dkoval/dev/React-Highcharts/src/constants/bar/data-helpers-bar.js",[],"/Users/dkoval/dev/React-Highcharts/src/constants/bar/default-options-bar.js",[],"/Users/dkoval/dev/React-Highcharts/src/constants/bar/modes-options-bar.js",[],"/Users/dkoval/dev/React-Highcharts/src/constants/line/data-helpers-line.js",[],"/Users/dkoval/dev/React-Highcharts/src/constants/line/default-options-line.js",["189"],"export const pureRandom = {\n  chart: {\n    type: 'line',\n    zoomType: 'xy',\n  },\n  title: {\n    text: 'Randomly generated data',\n  },\n  subtitle: {\n    text: 'This data is not real',\n  },\n  xAxis: {\n    categories: [\n      'Jan',\n      'Feb',\n      'Mar',\n      'Apr',\n      'May',\n      'Jun',\n      'Jul',\n      'Aug',\n      'Sep',\n      'Oct',\n      'Nov',\n      'Dec',\n    ],\n  },\n  legend: {\n    enabled: true,\n  },\n  yAxis: {\n    title: {\n      text: 'Random Value (UOM)',\n    },\n  },\n  tooltip: {\n    pointFormat:\n      '<span style=\"color:{series.color}\">{series.name}</span>: <b>{point.y}</b> (UOM)<br/>',\n  },\n  plotOptions: {\n    line: {\n      dataLabels: {\n        enabled: true,\n      },\n      enableMouseTracking: true,\n    },\n    area: {\n      stacking: 'normal',\n      lineColor: '#666666',\n      lineWidth: 1,\n      marker: {\n        lineWidth: 1,\n        lineColor: '#666666',\n      },\n      dataLabels: {\n        enabled: true,\n      },\n      enableMouseTracking: true,\n    },\n    series: {\n      animation: true,\n      marker: {\n        enabled: true,\n      },\n    },\n  },\n  series: [],\n};\n\nexport const configurableRandom = {\n  chart: {\n    type: 'line',\n    zoomType: 'x',\n  },\n  title: {\n    text: 'Randomly generated data',\n  },\n  subtitle: {\n    text: 'This data is not real',\n  },\n  legend: {\n    enabled: true,\n  },\n  yAxis: {\n    title: {\n      text: 'Random Value (UOM)',\n    },\n  },\n  tooltip: {\n    formatter: function () {\n      return (\n        '<b style=\"color: ' +\n        this.series.color +\n        '\">' +\n        this.series.name +\n        '</b><br>' +\n        'x = <b>' +\n        this.x +\n        '</b><br>' +\n        'y = <b>' +\n        this.y +\n        '</b>'\n      );\n    },\n  },\n  plotOptions: {\n    line: {\n      dataLabels: {\n        enabled: true,\n      },\n      enableMouseTracking: true,\n    },\n    series: {\n      animation: true,\n      marker: {\n        enabled: true,\n      },\n    },\n  },\n  series: [],\n};\n\nexport const stockSimulation = {\n  rangeSelector: {\n    selected: 1,\n  },\n  title: {\n    text: 'Simulation',\n  },\n  navigator: {\n    enabled: true,\n  },\n  rangeSelector: {\n    enabled: true,\n    buttons: [\n      {\n        type: 'second',\n        count: 30,\n        text: '30sec',\n      },\n      {\n        type: 'minute',\n        count: 1,\n        text: '1min',\n      },\n      {\n        type: 'minute',\n        count: 5,\n        text: '5min',\n      },\n      {\n        type: 'minute',\n        count: 10,\n        text: '5min',\n      },\n      {\n        type: 'hour',\n        count: 1,\n        text: '1h',\n      },\n      {\n        type: 'all',\n        text: 'All',\n      },\n    ],\n    buttonTheme: {\n      width: 60,\n    },\n  },\n  tooltip: {\n    valueDecimals: 2,\n    valuePrefix: '$',\n    valueSuffix: ' USD',\n  },\n  plotOptions: {\n    series: {\n      animation: false,\n      marker: {\n        enabled: true,\n      },\n    },\n  },\n  series: [],\n};\n\nexport const functions = {\n  chart: {\n    type: 'line',\n    zoomType: 'xy',\n  },\n  title: {\n    text: 'Functions',\n  },\n  subtitle: {\n    text: 'Discrete representation with the given accuracy',\n  },\n  yAxis: {\n    title: {\n      text: null,\n    },\n  },\n  tooltip: {\n    formatter: function () {\n      return (\n        '<b style=\"color: ' +\n        this.series.color +\n        '\">' +\n        this.series.name +\n        '</b><br>' +\n        'x = <b>' +\n        this.x +\n        '</b><br>' +\n        'f(x) = <b>' +\n        this.y +\n        '</b>'\n      );\n    },\n  },\n  series: [],\n};\n\nexport const interestingFactsTemperature = {\n  chart: {\n    type: 'line',\n  },\n  title: {\n    text: 'Monthly Average Temperature',\n  },\n  subtitle: {\n    text: 'Source: holiday-weather.com',\n  },\n  xAxis: {\n    categories: [\n      'Jan',\n      'Feb',\n      'Mar',\n      'Apr',\n      'May',\n      'Jun',\n      'Jul',\n      'Aug',\n      'Sep',\n      'Oct',\n      'Nov',\n      'Dec',\n    ],\n  },\n  yAxis: {\n    title: {\n      text: 'Temperature (°C)',\n    },\n  },\n  tooltip: {\n    valueSuffix: ' (°C)',\n  },\n  plotOptions: {\n    line: {\n      dataLabels: {\n        enabled: true,\n      },\n      enableMouseTracking: true,\n    },\n  },\n  series: [\n    {\n      name: 'Tokyo',\n      data: [5, 6, 9, 14, 18, 21, 25, 26, 23, 18, 12, 8],\n    },\n    {\n      name: 'London',\n      data: [5, 7, 9, 11, 14, 16, 19, 19, 17, 13, 10, 7],\n    },\n    {\n      name: 'Kiev',\n      data: [-5, -3, 2, 8, 15, 18, 19, 18, 14, 8, 2, -2],\n    },\n    {\n      name: 'Barcelona',\n      data: [10, 10, 12, 13, 16, 20, 23, 24, 22, 18, 13, 11],\n    },\n    {\n      name: 'Dubai',\n      data: [19, 20, 23, 26, 31, 33, 35, 36, 33, 29, 25, 21],\n    },\n    {\n      name: 'Moscow',\n      data: [-8, -7, -2, 6, 13, 18, 19, 17, 12, 6, -1, -6],\n    },\n    {\n      name: 'Toronto',\n      data: [-3, -3, 1, 7, 14, 16, 21, 21, 18, 11, 5, -1],\n    },\n  ],\n};\n\nexport const interestingFactsPopulation = {\n  chart: {\n    type: 'line',\n    zoomType: 'x',\n  },\n  title: {\n    text: 'Population by Country',\n  },\n  subtitle: {\n    text: 'Source: ourworldindata.org',\n  },\n  xAxis: {\n    title: {\n      text: 'Years',\n    },\n  },\n  yAxis: {\n    title: {\n      text: 'Population (number of people)',\n    },\n  },\n  tooltip: {\n    valueSuffix: ' people',\n  },\n  plotOptions: {\n    line: {\n      dataLabels: {\n        enabled: false,\n      },\n      enableMouseTracking: true,\n    },\n    series: {\n      animation: true,\n      marker: {\n        enabled: false,\n      },\n    },\n  },\n  series: [\n    {\n      name: 'China',\n      data: [\n        [1500, 103000000],\n        [1600, 160000000],\n        [1700, 138000000],\n        [1750, 225000000],\n        [1800, 330000000],\n        [1850, 412000000],\n        [1900, 400000000],\n        [1910, 423000000],\n        [1920, 472000000],\n        [1930, 489000000],\n        [1940, 518770000],\n        [1950, 546815000],\n        [1960, 667070000],\n        [1970, 818315000],\n        [1980, 981861000],\n        [1990, 1135185000],\n        [2000, 1262645000],\n      ],\n    },\n    {\n      name: 'India',\n      data: [\n        [1500, 110000000],\n        [1600, 135000000],\n        [1700, 165000000],\n        [1850, 235800017],\n        [1900, 284500000],\n        [1910, 302100000],\n        [1920, 305600000],\n        [1930, 336400000],\n        [1940, 386800000],\n        [1950, 359000000],\n        [1960, 434000000],\n        [1970, 541000000],\n        [1980, 679000000],\n        [1990, 839000000],\n        [2000, 1004124000],\n      ],\n    },\n    {\n      name: 'USA',\n      data: [\n        [1800, 6000000],\n        [1850, 23579000],\n        [1900, 76391000],\n        [1910, 92787000],\n        [1920, 106881000],\n        [1930, 123668000],\n        [1940, 132637000],\n        [1950, 152271000],\n        [1960, 180671000],\n        [1970, 205052000],\n        [1980, 227726000],\n        [1990, 250131000],\n        [2000, 282158000],\n      ],\n    },\n    {\n      name: 'Germany',\n      data: [\n        [1500, 12000000],\n        [1600, 16000000],\n        [1700, 15000000],\n        [1750, 15000000],\n        [1800, 18000000],\n        [1850, 33746000],\n        [1900, 54388000],\n        [1910, 62884000],\n        [1920, 60894000],\n        [1930, 65084000],\n        [1940, 69835000],\n        [1950, 68374572],\n        [1960, 72480869],\n        [1970, 77783164],\n        [1980, 78297904],\n        [1990, 79380394],\n        [2000, 82187909],\n      ],\n    },\n    {\n      name: 'Ukraine',\n      data: [\n        [1800, 11215490],\n        [1950, 36774854],\n        [1960, 42644035],\n        [1970, 47235697],\n        [1980, 50046649],\n        [1990, 51622275],\n        [2000, 49007559],\n      ],\n    },\n    {\n      name: 'Russia',\n      data: [\n        [1950, 101936816],\n        [1960, 119631633],\n        [1970, 130245476],\n        [1980, 139038849],\n        [1990, 147973000],\n        [2000, 146710000],\n      ],\n    },\n    {\n      name: 'Spain',\n      data: [\n        [1500, 6800000],\n        [1600, 8240000],\n        [1700, 8770000],\n        [1750, 9500000],\n        [1800, 11500000],\n        [1850, 14894000],\n        [1900, 18566000],\n        [1910, 19858000],\n        [1920, 21232000],\n        [1930, 23445000],\n        [1940, 25757000],\n        [1950, 28062963],\n        [1960, 30641187],\n        [1970, 33876479],\n        [1980, 37488360],\n        [1990, 39350769],\n        [2000, 40016081],\n      ],\n    },\n    {\n      name: 'Japan',\n      data: [\n        [1500, 15400000],\n        [1600, 18500000],\n        [1700, 27000000],\n        [1750, 29000000],\n        [1800, 28000000],\n        [1850, 32000000],\n        [1900, 44103000],\n        [1910, 49518000],\n        [1920, 55818000],\n        [1930, 64203000],\n        [1940, 72967000],\n        [1950, 83805000],\n        [1960, 94091638],\n        [1970, 104344973],\n        [1980, 116807309],\n        [1990, 123537399],\n        [2000, 126179000],\n      ],\n    },\n  ],\n};\n\nexport const interestingFactsITGiants = {\n  chart: {\n    type: 'line',\n    zoomType: 'x',\n  },\n  title: {\n    text: 'Net Income of IT Giants',\n  },\n  subtitle: {\n    text: 'Source: macrotrends.net',\n  },\n  xAxis: {\n    title: {\n      text: 'Years',\n    },\n  },\n  yAxis: {\n    title: {\n      text: 'TTM Net Income (USD)',\n    },\n  },\n  plotOptions: {\n    series: {\n      animation: true,\n      marker: {\n        enabled: true,\n      },\n      lineWidth: 2,\n    },\n  },\n  tooltip: {\n    valuePrefix: '$',\n    valueSuffix: ' USD',\n  },\n  series: [\n    {\n      name: 'Apple Inc.',\n      data: [\n        [2007, 3130000000],\n        [2008, 4600000000],\n        [2009, 8120000000],\n        [2010, 12240000000],\n        [2011, 23610000000],\n        [2012, 40130000000],\n        [2013, 37750000000],\n        [2014, 38560000000],\n        [2015, 50740000000],\n        [2016, 47800000000],\n        [2017, 46650000000],\n      ],\n    },\n    {\n      name: 'Microsoft',\n      data: [\n        [2007, 14070000000],\n        [2008, 17680000000],\n        [2009, 14570000000],\n        [2010, 18760000000],\n        [2011, 23150000000],\n        [2012, 16980000000],\n        [2013, 21860000000],\n        [2014, 22070000000],\n        [2015, 12190000000],\n        [2016, 16800000000],\n        [2017, 21200000000],\n      ],\n    },\n    {\n      name: 'Google',\n      data: [\n        [2007, 3690000000],\n        [2008, 4830000000],\n        [2009, 4580000000],\n        [2010, 7410000000],\n        [2011, 9010000000],\n        [2012, 11110000000],\n        [2013, 11640000000],\n        [2014, 12960000000],\n        [2015, 14260000000],\n        [2016, 17990000000],\n        [2017, 19340000000],\n      ],\n    },\n    {\n      name: 'Facebook',\n      data: [\n        [2010, 220000000],\n        [2011, 690000000],\n        [2012, 340000000],\n        [2013, 550000000],\n        [2014, 2370000000],\n        [2015, 2720000000],\n        [2016, 6450000000],\n        [2017, 13130000000],\n      ],\n    },\n    {\n      name: 'Amazon',\n      data: [\n        [2007, 310000000],\n        [2008, 590000000],\n        [2009, 660000000],\n        [2010, 1090000000],\n        [2011, 1040000000],\n        [2012, 380000000],\n        [2013, -100000000],\n        [2014, 180000000],\n        [2015, -190000000],\n        [2016, 1930000000],\n        [2017, 1920000000],\n      ],\n    },\n    {\n      name: 'IBM',\n      data: [\n        [2007, 9870000000],\n        [2008, 11400000000],\n        [2009, 12650000000],\n        [2010, 14010000000],\n        [2011, 15370000000],\n        [2012, 16270000000],\n        [2013, 15920000000],\n        [2014, 16750000000],\n        [2015, 11280000000],\n        [2016, 11930000000],\n        [2017, 11440000000],\n      ],\n    },\n  ],\n};\n","/Users/dkoval/dev/React-Highcharts/src/constants/line/modes-options-line.js",[],"/Users/dkoval/dev/React-Highcharts/src/constants/other/data-helpers-other.js",["190"],"import Highcharts from 'highcharts';\n\nimport { limitNumberOfDecimals } from '../shared/helpers';\n\nexport function generateSeriesForHeatmap(options, diagonalized) {\n  const width = Math.round(Math.random() * 8) + 2;\n  const height = diagonalized ? width : Math.round(Math.random() * 8) + 2;\n  const data = [];\n  const xCategories = [];\n  const yCategories = [];\n\n  for (let i = 0; i < width; i++) {\n    if (diagonalized) {\n      xCategories.push('Variable ' + (i + 1));\n    } else {\n      xCategories.push('xCategory ' + (i + 1));\n    }\n\n    for (let j = 0; j < height; j++) {\n      if (i === 0 && diagonalized) yCategories.push('Variable ' + (j + 1));\n      if (i === 0 && !diagonalized) yCategories.push('yCategory ' + (j + 1));\n      if (diagonalized && i < j) {\n        const value = Math.round(Math.random() * 100) / 100;\n        data.push([i, j, value]);\n        data.push([j, i, value]);\n      } else if (diagonalized && i === j) {\n        data.push([i, j, null]);\n      } else if (!diagonalized) {\n        const value = Math.round(Math.random() * 100) + 1;\n        data.push([i, j, value]);\n      }\n    }\n  }\n  options.xAxis.categories = xCategories;\n  options.yAxis.categories = yCategories;\n  options.series = [\n    {\n      name: 'Randomly generated data',\n      borderWidth: 1,\n      data,\n      dataLabels: {\n        enabled: true,\n        color: '#000000',\n      },\n    },\n  ];\n\n  return options;\n}\n\nexport function generateSeriesForTilemap() {\n  const width = Math.round(Math.random() * 10) + 2;\n  const height = Math.round(Math.random() * 7) + 2;\n  const probability = 25 + Math.random() * 25;\n  const result = [];\n\n  for (let i = 0; i < width; i++) {\n    for (let j = 0; j < height; j++) {\n      const randomTry = Math.random() * 100;\n      const value = Math.round(Math.random() * 99) + 1;\n      if (randomTry > probability) {\n        result.push([i, j, value]);\n      }\n    }\n  }\n\n  return [{ data: result }];\n}\n\nexport function generateSeriesForPolar() {\n  const possibleOutcomes = [4, 5, 6, 8, 10, 12];\n  const randomIndex = Math.round(Math.random() * (possibleOutcomes.length - 1));\n  const numberOfPoints = possibleOutcomes[randomIndex];\n  const numberOfSeries = Math.round(Math.random() * 4) + 1;\n  const result = [];\n\n  for (let i = 0; i < numberOfSeries; i++) {\n    const data = [];\n    for (let j = 0; j < numberOfPoints; j++) {\n      const value = Math.round(Math.random() * 99) + 1;\n      data.push(value);\n    }\n    result.push({\n      name: `Random serie ${i + 1}`,\n      data,\n    });\n  }\n\n  return result;\n}\n\nexport function countWords(input, filter) {\n  const object = {};\n  const inputFinal = input;\n  const inputArray = inputFinal.split(/\\W+/);\n  const filterFinal = filter;\n\n  for (let i = 0; i < inputArray.length; i++) {\n    const currentWord = inputArray[i];\n\n    if (currentWord.length > 0 && !filterFinal.includes(currentWord)) {\n      if (object[currentWord]) {\n        object[currentWord]++;\n      } else {\n        object[currentWord] = 1;\n      }\n    }\n  }\n\n  const keys = Object.keys(object);\n  const result = [];\n\n  for (let i = 0; i < keys.length; i++) {\n    const value = object[keys[i]];\n    result.push([value, keys[i]]);\n  }\n\n  return result;\n}\n\nexport function generateSeriesForWordCloud(data, limit) {\n  data.sort((a, b) => b[0] - a[0]);\n  const result = {\n    type: 'wordcloud',\n    data: [],\n  };\n  for (let i = 0; i < Math.min(data.length, limit); i++) {\n    result.data.push({\n      name: data[i][1],\n      weight: data[i][0],\n    });\n  }\n\n  return [result];\n}\n\nexport function generateSeriesPyramid() {\n  const result = [];\n  let previous = 1000;\n  const pointsNumber = 3 + Math.floor(Math.random() * 4);\n  for (let i = 0; i < pointsNumber; i += 1) {\n    const name = `Category ${i + 1}`;\n    const decrease = 0.2 + Math.random() * 0.8;\n    const value = Math.floor(decrease * previous);\n    previous = value;\n    result.push([name, value]);\n  }\n  return result;\n}\n\nexport function analyzeGaugeText(configs) {\n  const { text, chars: charsMax, digits: digitMax, symbols: symbolsMax } = configs;\n  let rawChars = 0;\n  let rawDigits = 0;\n  let rawSymbols = 0;\n  for (let i = 0; i < text.length; i += 1) {\n    if (/\\d/.test(text[i])) {\n      rawDigits += 1;\n    } else if (/\\w/.test(text[i])) {\n      rawChars += 1;\n    } else {\n      rawSymbols += 1;\n    }\n  }\n  const chars = Math.floor((rawChars * 1000) / charsMax) / 10;\n  const digits = Math.floor((rawDigits * 1000) / digitMax) / 10;\n  const symbols = Math.floor((rawSymbols * 1000) / symbolsMax) / 10;\n  return { chars, digits, symbols };\n}\n\nfunction updateBasedOnConnections(points) {\n  const helper = {};\n  points.forEach(point => {\n    if (!helper[point[1]]) {\n      helper[point[1]] = true;\n    }\n  });\n\n  return Object.keys(helper);\n}\n\nexport function generateDataForSankey(configs) {\n  const { numberNodes, numberLevels, density } = configs;\n  let count = 1;\n  let result = [];\n  let previousNodes = [];\n  for (let node = 0; node < numberNodes; node += 1) {\n    previousNodes.push(`L1-N${node + 1}`);\n  }\n\n  for (let level = 1; level < numberLevels; level += 1) {\n    const connectionsOnLevel = [];\n    previousNodes.forEach(base => {\n      for (let node = 0; node < numberNodes; node += 1) {\n        const target = `L${level + 1}-N${node + 1}`;\n        const weight = Math.floor(1 + Math.random() * 10);\n        if (Math.random() * 100 <= density) {\n          connectionsOnLevel.push([base, target, weight]);\n        }\n      }\n    });\n    previousNodes = updateBasedOnConnections(connectionsOnLevel);\n    result = result.concat(connectionsOnLevel);\n  }\n\n  return result;\n}\n\nexport function getNow() {\n  var now = new Date();\n\n  return {\n    hours: now.getHours() + now.getMinutes() / 60,\n    minutes: (now.getMinutes() * 12) / 60 + (now.getSeconds() * 12) / 3600,\n    seconds: (now.getSeconds() * 12) / 60,\n  };\n}\n\nexport function pad(number, length) {\n  // Create an array of the remaining length + 1 and join it with 0's\n  return new Array((length || 2) + 1 - String(number).length).join(0) + number;\n}\n\n// Move cloack arrows\nexport function move(chart) {\n  setInterval(function () {\n    const now = getNow();\n\n    if (chart.axes) {\n      // not destroyed\n      var hour = chart.get('hour'),\n        minute = chart.get('minute'),\n        second = chart.get('second'),\n        // run animation unless we're wrapping around from 59 to 0\n        animation = now.seconds === 0 ? false : { easing: 'easeOutBounce' };\n\n      // Cache the tooltip text\n      chart.tooltipText =\n        pad(Math.floor(now.hours), 2) +\n        ':' +\n        pad(Math.floor(now.minutes * 5), 2) +\n        ':' +\n        pad(now.seconds * 5, 2);\n\n      hour.update(now.hours, true, animation);\n      minute.update(now.minutes, true, animation);\n      second.update(now.seconds, true, animation);\n    }\n  }, 1000);\n}\n\n/**\n * Easing function from https://github.com/danro/easing-js/blob/master/easing.js\n */\nMath.easeOutBounce = function (pos) {\n  if (pos < 1 / 2.75) {\n    return 7.5625 * pos * pos;\n  }\n  if (pos < 2 / 2.75) {\n    return 7.5625 * (pos -= 1.5 / 2.75) * pos + 0.75;\n  }\n  if (pos < 2.5 / 2.75) {\n    return 7.5625 * (pos -= 2.25 / 2.75) * pos + 0.9375;\n  }\n  return 7.5625 * (pos -= 2.625 / 2.75) * pos + 0.984375;\n};\n\nexport function generateSeriesForClock(options) {\n  let now = getNow();\n  return [\n    {\n      data: [\n        {\n          id: 'hour',\n          y: now.hours,\n          dial: {\n            radius: '60%',\n            baseWidth: 12,\n            baseLength: '50%',\n            rearLength: '10%',\n            backgroundColor: 'black',\n          },\n        },\n        {\n          id: 'minute',\n          y: now.minutes,\n          dial: {\n            radius: '95%',\n            baseWidth: 10,\n            baseLength: '50%',\n            rearLength: '10%',\n            backgroundColor: 'black',\n          },\n        },\n        {\n          id: 'second',\n          y: now.seconds,\n          dial: {\n            radius: '100%',\n            baseWidth: 2,\n            rearLength: '20%',\n          },\n        },\n      ],\n      animation: false,\n      dataLabels: {\n        enabled: false,\n      },\n    },\n  ];\n}\n\nexport function generateRandomPointsBoxplot(min, max, numberOfPoints) {\n  const result = [];\n  for (let i = 0; i < numberOfPoints; i += 1) {\n    const rawRandValue = min + Math.random() * (max - min);\n    const randomValue = Math.round(rawRandValue * 100) / 100;\n    result.push(randomValue);\n  }\n  return result;\n}\n\nconst getMedianOfDataSet = data => {\n  if (data.length % 2 === 0) {\n    const leftCentral = data[data.length / 2 - 1];\n    const rightCentral = data[data.length / 2];\n    return (leftCentral + rightCentral) / 2;\n  }\n  return data[(data.length + 1) / 2 - 1];\n};\n\nconst calculateStatistics = (data, target, applyOutliers, additionalParams = {}) => {\n  const { lastIteration, outliers, oldQ1, oldMed, oldQ3 } = additionalParams;\n  const result = {};\n  const statistics = [];\n  const sortedData = data.sort((a, b) => a - b);\n  const leftMedIndex = Math.floor(sortedData.length / 2);\n  const rightMedIndex = Math.ceil(sortedData.length / 2);\n  // statistics calculation\n  const min = sortedData[0];\n  const q1 = lastIteration ? oldQ1 : getMedianOfDataSet(sortedData.slice(0, leftMedIndex));\n  const med = lastIteration ? oldMed : getMedianOfDataSet(sortedData);\n  const q3 = lastIteration\n    ? oldQ3\n    : getMedianOfDataSet(sortedData.slice(rightMedIndex, sortedData.length));\n  const max = sortedData[sortedData.length - 1];\n  // outliers helpers\n  const acceptedDistance = (q3 - q1) * 1.5;\n  const acceptableMin = q1 - acceptedDistance;\n  const acceptableMax = q3 + acceptedDistance;\n  // skip outliers if not neccesary to apply them\n  if (!applyOutliers || lastIteration || (acceptableMin < min && acceptableMax > max)) {\n    statistics.push(limitNumberOfDecimals(min));\n    statistics.push(limitNumberOfDecimals(q1));\n    statistics.push(limitNumberOfDecimals(med));\n    statistics.push(limitNumberOfDecimals(q3));\n    statistics.push(limitNumberOfDecimals(max));\n\n    result.statistics = statistics;\n    result.outliers = (outliers || []).map(value => [target, limitNumberOfDecimals(value)]);\n    return result;\n  }\n  const rawOutliers = [];\n  const filteredData = sortedData.filter(point => {\n    if (point > acceptableMin && point < acceptableMax) {\n      return true;\n    }\n    rawOutliers.push(point);\n    return false;\n  });\n  const params = { lastIteration: true, outliers: rawOutliers, oldQ1: q1, oldMed: med, oldQ3: q3 };\n  return calculateStatistics(filteredData, target, applyOutliers, params);\n};\n\nexport function generateInitialDataBoxplot(options) {\n  const { min, max } = options;\n  const NUMBER_OF_BOXPLOTS = 4;\n  const result = {};\n  for (let i = 0; i < NUMBER_OF_BOXPLOTS; i += 1) {\n    result[i + 1] = generateRandomPointsBoxplot(min, max, 5);\n  }\n  return result;\n}\n\nexport function generateBoxplotSeries(data, options) {\n  const result = {};\n  Object.keys(data).forEach(boxplot => {\n    result[boxplot] = calculateStatistics(data[boxplot], Number(boxplot) - 1, options.outliers);\n  });\n  let outliers = [];\n  Object.keys(result).forEach(boxplot => (outliers = outliers.concat(result[boxplot].outliers)));\n\n  return [\n    {\n      name: 'Statistics',\n      data: Object.keys(result).map(boxplot => result[boxplot].statistics),\n      tooltip: {\n        headerFormat: '<em>Boxplot {point.key}</em><br/>',\n      },\n    },\n    {\n      name: 'Outliers',\n      color: Highcharts.getOptions().colors[0],\n      type: 'scatter',\n      data: outliers,\n      marker: {\n        fillColor: 'white',\n        lineWidth: 2,\n        lineColor: Highcharts.getOptions().colors[0],\n      },\n      tooltip: {\n        pointFormat: 'Value: {point.y}',\n      },\n    },\n  ];\n}\n\nexport function averageLineBoxplot(data) {\n  let sum = 0;\n  let count = 0;\n  Object.keys(data).forEach(boxplot => {\n    data[boxplot].forEach(point => {\n      sum += point;\n      count += 1;\n    });\n  });\n\n  if (count > 0) {\n    const average = Math.round((sum * 100) / count) / 100;\n    return [\n      {\n        value: average,\n        color: 'red',\n        width: 2,\n        zIndex: 5,\n        label: {\n          text: `Global average: ${average}`,\n          align: 'center',\n          style: {\n            color: 'gray',\n          },\n        },\n      },\n    ];\n  }\n  return [];\n}\n","/Users/dkoval/dev/React-Highcharts/src/constants/other/default-options-other.js",[],"/Users/dkoval/dev/React-Highcharts/src/constants/other/modes-options-other.js",[],"/Users/dkoval/dev/React-Highcharts/src/constants/pie/data-helpers-pie.js",[],"/Users/dkoval/dev/React-Highcharts/src/constants/pie/default-options-pie.js",["191","192","193","194"],"export const pureRandom = {\n  chart: {\n    plotBackgroundColor: null,\n    plotBorderWidth: null,\n    plotShadow: false,\n    type: 'pie',\n    options3d: {\n      enabled: true,\n      alpha: 45,\n      beta: 0,\n    },\n  },\n  title: {\n    text: '',\n  },\n  subtitle: {\n    text: '',\n  },\n  tooltip: {\n    enabled: true,\n    pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>',\n  },\n  legend: {\n    enabled: true,\n  },\n  plotOptions: {\n    pie: {\n      allowPointSelect: true,\n      cursor: 'pointer',\n      depth: 35,\n      dataLabels: {\n        enabled: true,\n        format: '{point.percentage:.1f}%',\n      },\n      innerSize: '30%',\n      showInLegend: true,\n    },\n    series: {\n      animation: true,\n    },\n  },\n  series: [],\n};\n\nexport const configurableRandom = {\n  chart: {\n    plotBackgroundColor: null,\n    plotBorderWidth: null,\n    plotShadow: false,\n    type: 'pie',\n  },\n  title: {\n    text: 'Randomly generated data',\n  },\n  subtitle: {\n    text: 'This data is not real',\n  },\n  tooltip: {\n    enabled: true,\n    pointFormat: 'Value: <b>{point.y:.1f}</b><br/>' + 'Percent: <b>{point.percentage:.1f}%</b>',\n  },\n  legend: {\n    enabled: true,\n  },\n  plotOptions: {\n    pie: {\n      allowPointSelect: true,\n      cursor: 'pointer',\n      showInLegend: true,\n      dataLabels: {\n        enabled: true,\n      },\n    },\n    series: {\n      animation: true,\n    },\n  },\n  series: [],\n};\n\nexport const clusteringSimulation = {\n  chart: {\n    plotBackgroundColor: null,\n    plotBorderWidth: null,\n    plotShadow: false,\n    type: 'pie',\n  },\n  title: {\n    text: 'Simple Clustering Simulation',\n  },\n  subtitle: {\n    text: 'This data is generated randomly',\n  },\n  tooltip: {\n    enabled: true,\n    pointFormat: 'Count: <b>{point.y}</b><br/>' + 'Percent: <b>{point.percentage:.1f}%</b>',\n  },\n  legend: {\n    enabled: true,\n  },\n  plotOptions: {\n    pie: {\n      allowPointSelect: true,\n      cursor: 'pointer',\n      showInLegend: true,\n      dataLabels: {\n        enabled: false,\n      },\n    },\n    series: {\n      animation: true,\n    },\n  },\n  series: [\n    {\n      name: 'Clusters',\n      colorByPoint: true,\n      data: [\n        {\n          name: 'Cluster 1',\n          y: 1,\n        },\n        {\n          name: 'Cluster 2',\n          y: 4,\n        },\n        {\n          name: 'Cluster 3',\n          y: 2,\n        },\n      ],\n    },\n  ],\n};\n\nexport const primeFactorization = {\n  chart: {\n    plotBackgroundColor: null,\n    plotBorderWidth: null,\n    plotShadow: false,\n    type: 'pie',\n  },\n  title: {\n    text: 'Simple Clustering Simulation',\n  },\n  subtitle: {\n    text: 'Lalala subtitle',\n  },\n  tooltip: {\n    enabled: true,\n    pointFormat: 'Count: <b>{point.y}</b><br/>' + 'Percent: <b>{point.percentage:.1f}%</b>',\n  },\n  legend: {\n    enabled: true,\n  },\n  plotOptions: {\n    pie: {\n      allowPointSelect: true,\n      cursor: 'pointer',\n      showInLegend: true,\n      dataLabels: {\n        enabled: false,\n      },\n    },\n    series: {\n      animation: true,\n    },\n  },\n  series: [],\n};\n\nexport const irrationalAnalysis = {\n  chart: {\n    plotBackgroundColor: null,\n    plotBorderWidth: null,\n    plotShadow: false,\n    type: 'pie',\n  },\n  title: {\n    text: 'Distribution of digits of the number Pi',\n  },\n  subtitle: {\n    text: 'THis is subtitle',\n  },\n  tooltip: {\n    enabled: true,\n    pointFormat: 'Count: <b>{point.y}</b><br/>' + 'Percent: <b>{point.percentage:.1f}%</b>',\n  },\n  legend: {\n    enabled: true,\n  },\n  plotOptions: {\n    pie: {\n      allowPointSelect: true,\n      cursor: 'pointer',\n      showInLegend: true,\n      dataLabels: {\n        enabled: false,\n      },\n    },\n    series: {\n      animation: true,\n    },\n  },\n  series: [],\n};\n\nexport const interestingFactsOne = {\n  chart: {\n    type: 'pie',\n  },\n  title: {\n    text: 'Earth Area Composition',\n  },\n  subtitle: {\n    text: 'Source: <a href=\"https://en.wikipedia.org\">Wikipedia</a>',\n  },\n  yAxis: {\n    title: {\n      text: 'Area in km2',\n    },\n  },\n  plotOptions: {\n    pie: {\n      shadow: false,\n      center: ['50%', '50%'],\n    },\n  },\n  tooltip: {\n    valueSuffix: ' km2',\n  },\n  series: [\n    {\n      name: 'Total',\n      data: [\n        {\n          name: 'Oceans',\n          y: 361934000,\n          color: '#4d9ce6',\n        },\n        {\n          name: 'Continents',\n          y: 148989799,\n          color: '#268712',\n        },\n      ],\n      size: '60%',\n      dataLabels: {\n        formatter: function () {\n          return '<b>' + this.point.name + ':</b> ' + Math.round(this.percentage * 100) / 100 + '%';\n        },\n        color: '#ffffff',\n        distance: -30,\n      },\n    },\n    {\n      name: 'Area',\n      data: [\n        {\n          name: 'Pacific Ocean',\n          y: 168723000,\n          color: '#63a8e9',\n        },\n        {\n          name: 'Atlantic Ocean',\n          y: 85133000,\n          color: '#79b4ec',\n        },\n        {\n          name: 'Indian Ocean',\n          y: 70560000,\n          color: '#8fc1ef',\n        },\n        {\n          name: 'Southern Ocean',\n          y: 21960000,\n          color: '#a6cdf2',\n        },\n        {\n          name: 'Arctic Ocean',\n          y: 15558000,\n          color: '#bcdaf5',\n        },\n        {\n          name: 'Asia',\n          y: 44391162,\n          color: '#2c9d15',\n        },\n        {\n          name: 'Africa',\n          y: 30244049,\n          color: '#32b418',\n        },\n        {\n          name: 'North America',\n          y: 24247039,\n          color: '#39ca1c',\n        },\n        {\n          name: 'South America',\n          y: 17821029,\n          color: '#3fe01f',\n        },\n        {\n          name: 'Antarctica',\n          y: 14245000,\n          color: '#52e335',\n        },\n        {\n          name: 'Europe',\n          y: 10354636,\n          color: '#65e74b',\n        },\n        {\n          name: 'Australia',\n          y: 7686884,\n          color: '#79ea62',\n        },\n      ],\n      size: '80%',\n      innerSize: '60%',\n      dataLabels: {\n        formatter: function () {\n          return '<b>' + this.point.name + ':</b> ' + Math.round(this.percentage * 100) / 100 + '%';\n        },\n      },\n      id: 'versions',\n    },\n  ],\n  responsive: {\n    rules: [\n      {\n        condition: {\n          maxWidth: 400,\n        },\n        chartOptions: {\n          series: [\n            {\n              id: 'versions',\n              dataLabels: {\n                enabled: false,\n              },\n            },\n          ],\n        },\n      },\n    ],\n  },\n};\n\nexport const interestingFactsTwo = {\n  chart: {\n    plotBackgroundColor: null,\n    plotBorderWidth: null,\n    plotShadow: false,\n    type: 'pie',\n  },\n  title: {\n    text: 'Earth Population by Continents, 2017',\n  },\n  subtitle: {\n    text:\n      'Source: <a href=\"https://www.thoughtco.com/continents-by-area-and-size-ranking-1435142\">ThoughtCo.</a>',\n  },\n  tooltip: {\n    pointFormat: '{series.name}: <b>{point.y}</b> people',\n  },\n  plotOptions: {\n    pie: {\n      allowPointSelect: true,\n      cursor: 'pointer',\n      dataLabels: {\n        enabled: true,\n        format: '<b>{point.name}</b>: {point.percentage:.1f} %',\n      },\n    },\n  },\n  series: [\n    {\n      name: 'Population',\n      colorByPoint: true,\n      data: [\n        {\n          name: 'Asia',\n          y: 4406273622,\n        },\n        {\n          name: 'Africa',\n          y: 1215770813,\n        },\n        {\n          name: 'Europe',\n          y: 747364363,\n        },\n        {\n          name: 'North America',\n          y: 574836055,\n        },\n        {\n          name: 'South America',\n          y: 418537818,\n        },\n        {\n          name: 'Australia',\n          y: 23232413,\n        },\n      ],\n    },\n  ],\n};\n\nexport const interestingFactsThree = {\n  chart: {\n    plotBackgroundColor: null,\n    plotBorderWidth: null,\n    plotShadow: false,\n    type: 'pie',\n  },\n  title: {\n    text: 'Composition of the Earth Atmosphere',\n  },\n  subtitle: {\n    text: 'Source: <a href=\"http://climate.ncsu.edu/edu/k12/.AtmComposition\">Climate Education</a>',\n  },\n  legend: {\n    enabled: true,\n  },\n  tooltip: {\n    pointFormat: '{series.name}: <b>{point.y}%</b>',\n  },\n  plotOptions: {\n    pie: {\n      allowPointSelect: true,\n      cursor: 'pointer',\n      dataLabels: {\n        enabled: true,\n        format: '<b>{point.name}</b>: {point.y} %',\n      },\n      showInLegend: true,\n    },\n  },\n  series: [\n    {\n      name: 'Concentration',\n      colorByPoint: true,\n      data: [\n        {\n          name: 'Nitrogen',\n          y: 78.1,\n          color: '#134e86',\n        },\n        {\n          name: 'Oxygen',\n          y: 20.9,\n          color: '#1969b3',\n        },\n        {\n          name: 'Argon',\n          y: 0.9,\n          color: '#2083df',\n        },\n        {\n          name: 'Carbon dioxide',\n          y: 0.09349,\n          color: '#4d9ce6',\n        },\n        {\n          name: 'Neon',\n          y: 0.004675,\n          color: '#79b4ec',\n        },\n        {\n          name: 'Helium',\n          y: 0.001299,\n          color: '#8fc1ef',\n        },\n        {\n          name: 'Methane',\n          y: 0.000442,\n          color: '#a6cdf2',\n        },\n        {\n          name: 'Other',\n          y: 0.000094,\n          color: '#bcdaf5',\n        },\n      ],\n    },\n  ],\n};\n\nexport const interestingFactsFour = {\n  chart: {\n    plotBackgroundColor: null,\n    plotBorderWidth: null,\n    plotShadow: false,\n    type: 'pie',\n    options3d: {\n      enabled: true,\n      alpha: 45,\n      beta: 0,\n    },\n  },\n  title: {\n    text: 'Chemical Composition of Earth',\n  },\n  legend: {\n    enabled: true,\n  },\n  tooltip: {\n    pointFormat: '{series.name}: <b>{point.y}%</b>',\n  },\n  plotOptions: {\n    pie: {\n      allowPointSelect: true,\n      cursor: 'pointer',\n      depth: 35,\n      dataLabels: {\n        enabled: true,\n        format: '<b>{point.name}</b>: {point.y} %',\n      },\n      showInLegend: true,\n    },\n  },\n  series: [\n    {\n      name: 'Concentration',\n      colorByPoint: true,\n      data: [\n        {\n          name: 'Iron (Fe)',\n          y: 35,\n        },\n        {\n          name: 'Oxygen (O)',\n          y: 28,\n        },\n        {\n          name: 'Magnesium (Mg)',\n          y: 17,\n        },\n        {\n          name: 'Silicon (Si)',\n          y: 14.3,\n        },\n        {\n          name: 'Sulfur (S)',\n          y: 2.7,\n        },\n        {\n          name: 'Nickel (Ni)',\n          y: 2.7,\n        },\n        {\n          name: 'Calcium (Ca)',\n          y: 0.6,\n        },\n        {\n          name: 'Aluminium (Al)',\n          y: 0.4,\n        },\n        {\n          name: 'Other Elements',\n          y: 0.6,\n        },\n      ],\n    },\n  ],\n};\n\nexport const interestingFactsFive = {\n  chart: {\n    plotBackgroundColor: null,\n    plotBorderWidth: null,\n    plotShadow: false,\n    type: 'pie',\n    options3d: {\n      enabled: true,\n      alpha: 45,\n      beta: 0,\n    },\n  },\n  title: {\n    text: 'Chemical Composition of Human',\n  },\n  legend: {\n    enabled: true,\n  },\n  tooltip: {\n    pointFormat: '{series.name}: <b>{point.y}%</b>',\n  },\n  subtitle: {\n    text:\n      'Source: <a href=\"https://en.wikipedia.org/wiki/Composition_of_the_human_body\">Wikipedia</a>',\n  },\n  plotOptions: {\n    pie: {\n      allowPointSelect: true,\n      cursor: 'pointer',\n      depth: 35,\n      dataLabels: {\n        enabled: true,\n        format: '<b>{point.name}</b>: {point.y} %',\n      },\n      showInLegend: true,\n    },\n  },\n  series: [\n    {\n      name: 'Concentration',\n      colorByPoint: true,\n      data: [\n        {\n          name: 'Oxygen (O)',\n          y: 65.0,\n        },\n        {\n          name: 'Carbon (C)',\n          y: 18.5,\n        },\n        {\n          name: 'Hydrogen (H)',\n          y: 9.5,\n        },\n        {\n          name: 'Nitrogen (N)',\n          y: 3.2,\n        },\n        {\n          name: 'Phosphorus (P)',\n          y: 1.0,\n        },\n        {\n          name: 'Potassium (K)',\n          y: 0.4,\n        },\n        {\n          name: 'Sulfur (S)',\n          y: 0.3,\n        },\n        {\n          name: 'Sodium (Na)',\n          y: 0.2,\n        },\n        {\n          name: 'Other Elements',\n          y: 0.3,\n        },\n      ],\n    },\n  ],\n};\n\nexport const interestingFactsSix = {\n  chart: {\n    plotBackgroundColor: null,\n    plotBorderWidth: null,\n    plotShadow: false,\n    type: 'pie',\n  },\n  title: {\n    text: 'Human Life Time',\n  },\n  legend: {\n    enabled: false,\n  },\n  tooltip: {\n    pointFormat: 'Absolute: <b>{point.y} years</b><br/> Percentage: <b>{point.percentage:.2f}%</b>',\n  },\n  subtitle: {\n    text: 'Assume one lives 78 years',\n  },\n  plotOptions: {\n    pie: {\n      allowPointSelect: true,\n      cursor: 'pointer',\n      innerSize: '50%',\n      dataLabels: {\n        enabled: true,\n        format: '<b>{point.name}</b>',\n      },\n      showInLegend: true,\n    },\n  },\n  series: [\n    {\n      name: 'Concentration',\n      colorByPoint: true,\n      data: [\n        {\n          name: 'Sleping',\n          y: 28.3,\n        },\n        {\n          name: 'Working',\n          y: 10.5,\n        },\n        {\n          name: 'TV, Games, SM',\n          y: 9,\n        },\n        {\n          name: 'Doing Chores',\n          y: 6,\n        },\n        {\n          name: 'Eating',\n          y: 4,\n        },\n        {\n          name: 'Education',\n          y: 4.5,\n        },\n        {\n          name: 'Grooming',\n          y: 2.5,\n        },\n        {\n          name: 'Shopping',\n          y: 2.5,\n        },\n        {\n          name: 'Transportations',\n          y: 1.8,\n        },\n        {\n          name: 'LEFT FOR YOU!',\n          y: 9,\n          color: '#b3b3b3',\n        },\n      ],\n    },\n  ],\n};\n","/Users/dkoval/dev/React-Highcharts/src/constants/pie/modes-options-pie.js",[],"/Users/dkoval/dev/React-Highcharts/src/constants/pie/pi-digits.js",[],"/Users/dkoval/dev/React-Highcharts/src/constants/scatter/data-helpers-scatter.js",[],"/Users/dkoval/dev/React-Highcharts/src/constants/scatter/default-options-scatter.js",[],"/Users/dkoval/dev/React-Highcharts/src/constants/scatter/modes-options-scatter.js",[],"/Users/dkoval/dev/React-Highcharts/src/constants/shared/helpers.js",[],"/Users/dkoval/dev/React-Highcharts/src/index.js",[],"/Users/dkoval/dev/React-Highcharts/src/routes.js",[],{"ruleId":"195","severity":1,"message":"196","line":14,"column":3,"nodeType":"197","messageId":"198","endLine":14,"endColumn":22},{"ruleId":"195","severity":1,"message":"199","line":15,"column":3,"nodeType":"197","messageId":"198","endLine":15,"endColumn":24},{"ruleId":"200","severity":1,"message":"201","line":422,"column":13,"nodeType":"202","endLine":422,"endColumn":76},{"ruleId":"200","severity":1,"message":"201","line":428,"column":13,"nodeType":"202","endLine":428,"endColumn":84},{"ruleId":"200","severity":1,"message":"201","line":434,"column":13,"nodeType":"202","endLine":434,"endColumn":83},{"ruleId":"200","severity":1,"message":"201","line":442,"column":13,"nodeType":"202","endLine":442,"endColumn":81},{"ruleId":"200","severity":1,"message":"201","line":448,"column":13,"nodeType":"202","endLine":448,"endColumn":79},{"ruleId":"200","severity":1,"message":"201","line":456,"column":13,"nodeType":"202","endLine":456,"endColumn":82},{"ruleId":"195","severity":1,"message":"203","line":86,"column":13,"nodeType":"197","messageId":"198","endLine":86,"endColumn":17},{"ruleId":"200","severity":1,"message":"201","line":258,"column":13,"nodeType":"202","endLine":258,"endColumn":76},{"ruleId":"200","severity":1,"message":"201","line":264,"column":13,"nodeType":"202","endLine":264,"endColumn":84},{"ruleId":"200","severity":1,"message":"201","line":270,"column":13,"nodeType":"202","endLine":270,"endColumn":81},{"ruleId":"200","severity":1,"message":"201","line":278,"column":13,"nodeType":"202","endLine":278,"endColumn":77},{"ruleId":"200","severity":1,"message":"201","line":284,"column":13,"nodeType":"202","endLine":284,"endColumn":79},{"ruleId":"200","severity":1,"message":"201","line":292,"column":13,"nodeType":"202","endLine":292,"endColumn":82},{"ruleId":"200","severity":1,"message":"201","line":603,"column":13,"nodeType":"202","endLine":603,"endColumn":52},{"ruleId":"200","severity":1,"message":"201","line":606,"column":13,"nodeType":"202","endLine":606,"endColumn":52},{"ruleId":"200","severity":1,"message":"201","line":609,"column":13,"nodeType":"202","endLine":609,"endColumn":52},{"ruleId":"200","severity":1,"message":"201","line":612,"column":13,"nodeType":"202","endLine":612,"endColumn":52},{"ruleId":"200","severity":1,"message":"201","line":615,"column":13,"nodeType":"202","endLine":615,"endColumn":52},{"ruleId":"200","severity":1,"message":"201","line":618,"column":13,"nodeType":"202","endLine":618,"endColumn":52},{"ruleId":"200","severity":1,"message":"201","line":621,"column":13,"nodeType":"202","endLine":621,"endColumn":52},{"ruleId":"200","severity":1,"message":"201","line":624,"column":13,"nodeType":"202","endLine":624,"endColumn":52},{"ruleId":"200","severity":1,"message":"201","line":627,"column":13,"nodeType":"202","endLine":627,"endColumn":52},{"ruleId":"195","severity":1,"message":"204","line":1361,"column":13,"nodeType":"197","messageId":"198","endLine":1361,"endColumn":19},{"ruleId":"200","severity":1,"message":"201","line":355,"column":13,"nodeType":"202","endLine":355,"endColumn":76},{"ruleId":"200","severity":1,"message":"201","line":361,"column":13,"nodeType":"202","endLine":361,"endColumn":84},{"ruleId":"200","severity":1,"message":"201","line":367,"column":13,"nodeType":"202","endLine":367,"endColumn":86},{"ruleId":"200","severity":1,"message":"201","line":375,"column":13,"nodeType":"202","endLine":375,"endColumn":84},{"ruleId":"200","severity":1,"message":"201","line":381,"column":13,"nodeType":"202","endLine":381,"endColumn":84},{"ruleId":"200","severity":1,"message":"201","line":389,"column":13,"nodeType":"202","endLine":389,"endColumn":82},{"ruleId":"205","severity":1,"message":"206","line":178,"column":5,"nodeType":"207","messageId":"208","endLine":191,"endColumn":6},{"ruleId":"195","severity":1,"message":"209","line":202,"column":37,"nodeType":"197","messageId":"198","endLine":202,"endColumn":41},{"ruleId":"200","severity":1,"message":"201","line":400,"column":13,"nodeType":"202","endLine":400,"endColumn":52},{"ruleId":"200","severity":1,"message":"201","line":403,"column":13,"nodeType":"202","endLine":403,"endColumn":52},{"ruleId":"200","severity":1,"message":"201","line":406,"column":13,"nodeType":"202","endLine":406,"endColumn":52},{"ruleId":"200","severity":1,"message":"201","line":409,"column":13,"nodeType":"202","endLine":409,"endColumn":52},{"ruleId":"200","severity":1,"message":"201","line":414,"column":13,"nodeType":"202","endLine":414,"endColumn":52},{"ruleId":"210","severity":1,"message":"211","line":12,"column":15,"nodeType":"202","messageId":"212","endLine":16,"endColumn":16,"fix":"213"},{"ruleId":"210","severity":1,"message":"211","line":19,"column":15,"nodeType":"202","messageId":"212","endLine":23,"endColumn":16,"fix":"214"},{"ruleId":"210","severity":1,"message":"211","line":26,"column":15,"nodeType":"202","messageId":"212","endLine":26,"endColumn":93,"fix":"215"},{"ruleId":"210","severity":1,"message":"211","line":29,"column":15,"nodeType":"202","messageId":"212","endLine":33,"endColumn":16,"fix":"216"},{"ruleId":"195","severity":1,"message":"217","line":4,"column":7,"nodeType":"197","messageId":"198","endLine":4,"endColumn":10},{"ruleId":"195","severity":1,"message":"218","line":5,"column":7,"nodeType":"197","messageId":"198","endLine":5,"endColumn":12},{"ruleId":"195","severity":1,"message":"219","line":7,"column":7,"nodeType":"197","messageId":"198","endLine":7,"endColumn":11},{"ruleId":"220","severity":1,"message":"221","line":133,"column":3,"nodeType":"222","messageId":"223","endLine":133,"endColumn":16},{"ruleId":"195","severity":1,"message":"224","line":184,"column":7,"nodeType":"197","messageId":"198","endLine":184,"endColumn":12},{"ruleId":"225","severity":1,"message":"226","line":60,"column":53,"nodeType":"227","messageId":"228","endLine":60,"endColumn":54},{"ruleId":"225","severity":1,"message":"226","line":96,"column":49,"nodeType":"227","messageId":"228","endLine":96,"endColumn":50},{"ruleId":"225","severity":1,"message":"226","line":151,"column":49,"nodeType":"227","messageId":"228","endLine":151,"endColumn":50},{"ruleId":"225","severity":1,"message":"226","line":187,"column":49,"nodeType":"227","messageId":"228","endLine":187,"endColumn":50},"no-unused-vars","'interestingFactsTwo' is defined but never used.","Identifier","unusedVar","'interestingFactsThree' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'name' is assigned a value but never used.","'sankey' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'bins' is assigned a value but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","noTargetBlankWithoutNoreferrer",{"range":"229","text":"230"},{"range":"231","text":"230"},{"range":"232","text":"230"},{"range":"233","text":"230"},"'TOP' is assigned a value but never used.","'RIGHT' is assigned a value but never used.","'LEFT' is assigned a value but never used.","no-dupe-keys","Duplicate key 'rangeSelector'.","ObjectExpression","unexpected","'count' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat",[481,481]," rel=\"noreferrer\"",[728,728],[906,906],[1131,1131]]